#line 2 "parser_flex.cpp"

#line 4 "parser_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1052] =
    {   0,
        0,    0,    2,    2,  142,  140,    4,    4,  140,  133,
      140,  133,  133,  136,  133,  133,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  139,    1,  135,  134,
      136,  131,  130,  132,  138,  138,  138,  138,  138,  121,
      138,  138,  138,  122,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  123,  124,  125,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  126,
      127,  128,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  129,  138,
      138,  138,  138,  138,  138,  138,  138,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  137,  134,  109,  138,  110,  138,  138,  111,
      112,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  113,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  114,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  115,  138,  138,  116,  138,  138,

      138,  138,  138,  138,  138,  138,  117,  138,  138,  118,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  119,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  120,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      138,  138,  138,  138,  138,  138,  138,  138,   87,  138,
       86,  138,  138,  138,  138,  138,  138,   88,  138,  138,
      138,  138,  138,   89,  138,  138,  138,   90,  138,  138,
      138,  138,  138,   91,  138,  138,   92,   93,  138,  138,
       94,  138,   95,  138,  138,  138,  138,  138,   96,  138,

       97,   98,   99,  138,  100,  138,  138,  138,  138,  101,
      138,  138,  138,  138,  138,  102,  103,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  104,  138,  138,  138,
      138,  138,  105,  106,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  107,  138,  138,  108,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   66,   67,
      138,  138,   84,  138,  138,  138,  138,  138,  138,  138,
      138,   68,  138,  138,  138,  138,  138,   69,  138,  138,
      138,  138,  138,  138,  138,  138,   85,  138,  138,   70,
      138,  138,   71,   72,  138,  138,  138,  138,   73,   74,
       75,   76,  138,  138,  138,   77,   78,  138,  138,  138,

      138,  138,  138,   79,  138,  138,  138,  138,  138,  138,
       80,  138,  138,  138,  138,  138,   81,  138,  138,  138,
       82,  138,  138,  138,  138,   83,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,  138,   41,  138,   52,  138,  138,
       42,   65,  138,   43,  138,  138,  138,  138,   44,   45,
      138,   46,   47,   48,  138,   49,  138,  138,   50,   51,
      138,   53,  138,  138,   54,  138,  138,   55,  138,  138,
      138,  138,   56,  138,  138,   57,   58,  138,   59,  138,
       60,  138,  138,  138,  138,  138,   61,   62,   63,   64,
      138,  138,  138,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   24,   25,   20,   26,   27,   28,  138,  138,
       40,   29,  138,   30,   31,   22,   32,   33,  138,   34,
      138,  138,   35,   36,  138,  138,  138,   37,  138,   38,
      138,  138,   23,  138,  138,  138,   21,   39,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   19,  138,   13,  138,   14,  138,

      138,   15,   17,   18,  138,  138,  138,   16,  138,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  138,    9,  138,  138,   11,   12,
      138,   10,    2,    2,    2,    2,    2,    2,    2,    2,
        6,    7,    8,  138,    2,    2,    2,    2,    5,    2,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[1059] =
    {   0,
        0,    0,   65,    0,  385, 5789,  129,  131,    0, 5789,
      378,  376,  370,  127,  126,  367,  123,  123,  175,  221,
      112,  258,  121,  142,  138,  119,  135,  172,  136,  185,
      210,  173,    0,  183,  304,  347,  228,  228,  251,    0,
      156,  159,  338,    0,  327,  301,  296,  199,  241,  292,
      404,  462,  514,  566,  614,  662,  706,  754,  802,  263,
      293,  317,  318,  854,  901,  949,  349,  396,  993, 1045,
      401, 1097, 1138,  255,  298,  286, 5789, 5789,  280,  255,
      265, 5789, 5789, 5789,    0,  149,  162,  394,  300,  202,
      304,  204,  208,    0,  345,  247,  451,  404,  232,  245,

     1184,  295,  268,  343,  358,  463,  374,  397,  404,  411,
      447,  454,  455,  454,  461,    0,  497,  464,  472,  457,
      477,  507,  523,  467,  499,  501,  505,  515,  529,  525,
        0,  530,  515,  518,  536,  560,  564,  534,  543,  564,
      565,  558,  573,  558,  578,  578,  596,  573,  572,  616,
      612,  585,  586,  613,  623,  621,  607,    0,  292,  243,
      208,    0,    0,  202,  200,  288,    0,    0,    0,  643,
      689,  719, 1225, 1272,  743, 1313,  764,  831,  758,  875,
      852, 1355,  654,  891,  795, 1401,  806,  912,  924,  945,
     1445,  991,  998, 1043, 1001, 1053, 1090, 1107, 1096, 1145,

     1148, 1494, 1169, 1186, 1210, 1187, 1536, 1582, 1207, 1228,
     1261, 1276, 1324, 1325, 1251, 1331, 1378, 1416, 1450, 1466,
      947, 1432, 1497, 1520, 1538, 1623, 1487, 1561, 1572, 1592,
     1620, 1665, 1641, 1661,  746, 1711, 1695, 1713, 1754, 1796,
     1729, 1757, 5789,  192,    0,  629,    0,  638,  633,    0,
        0,  658,  666,  655,  673,  673,  680,  696,  695,  695,
      704,  703,  728,  712,    0,  828,  741,  766,  791, 1006,
      800,  808,  802,  855,  845,  864,  863,  871,  881,  897,
      912,  953,  968,  974,  980, 1019, 1020, 1043, 1043, 1035,
     1036, 1053, 1059, 1061, 1165, 1053, 1066,    0, 1080, 1103,

     1103, 1110, 1127, 1127, 1129, 1151,    0, 1170, 1193, 1217,
     1236, 1245, 1259, 1269, 1269, 1275, 1284, 1297, 1281, 1306,
     1309, 1319, 1324,    0, 1312, 1337, 1332, 1353, 1366, 1365,
     1363, 1380, 1362,    0, 1375, 1376, 1411, 1376, 1397, 1392,
     1411, 1507, 1416, 1424, 1434, 1482,    0,  176, 1723, 1775,
     1772, 1806, 1821, 1803, 1837, 1844, 1855, 1870, 1873, 1888,
     1898, 1919, 1922, 1929, 1940, 1952, 1950, 1968, 1970, 2016,
     2001, 1991, 2017, 2059, 2053, 2055, 2062, 2083, 2101, 2112,
     2116, 2122, 2113, 2155, 2159, 2165, 2171, 2196, 2202, 2220,
     2219, 2249, 2245, 2256, 2273, 2266, 2299, 2303, 2318, 2320,

     2323, 2332, 2357, 2353, 2373, 2377, 2374, 2410, 2407, 2416,
     2419, 2455, 2440, 2457, 2473, 2494, 2540, 2483, 2501, 2517,
     2547, 2537, 2570, 2563, 2588, 2600, 2617, 2606, 2634, 2650,
     2654, 2679, 2691, 2688, 2703, 2733, 2721, 2737, 2739, 2749,
     2790, 2778, 2775, 2796, 2819, 2866, 2816, 2857, 2837, 2840,
     1474, 1500, 1496, 1506, 1540, 1555, 1551, 1563,    0, 1569,
        0, 1559, 1591, 1585, 1584, 1590, 1612,    0, 1607, 1608,
     1603, 1612, 1644,    0, 1655, 1654, 1653,    0, 1652, 1657,
     1655, 1663, 1685,    0, 1668, 1682,    0,    0, 1696, 1696,
        0, 1717,    0, 1723, 1716, 1737, 1761, 1812,    0, 1784,

        0,    0,    0, 1777,    0, 1814, 1840, 1829, 1850,    0,
     1868, 1876, 1879, 1881, 1892,    0,    0, 1914, 1917, 1912,
     1948, 1961, 1972, 2000, 1999, 2022,    0, 2014, 2023, 2034,
     2061, 2056,    0, 2058, 2075, 2091, 2120, 2119, 2122, 2155,
     2152, 2173, 2181, 2188, 2210,    0, 2198, 2215,    0, 2873,
     2883, 2907, 2916, 2917, 2932, 2933, 2962, 2963, 2969, 2966,
     2987, 3005, 2999, 3015, 3017, 3041, 3053, 3059, 3062, 3090,
     3087, 3111, 3107, 3113, 3136, 3152, 3154, 3164, 3170, 3198,
     3182, 3208, 3218, 3228, 3224, 3239, 3249, 3265, 3267, 3282,
     3283, 3285, 3306, 3303, 3324, 3327, 3368, 3344, 3377, 3347,

     3365, 3386, 3401, 3389, 3419, 3431, 3435, 3437, 3447, 3481,
     3480, 3483, 3490, 3519, 3501, 3531, 3542, 3543, 3549, 3560,
     3585, 3591, 3606, 3603, 3639, 3615, 3645, 3649, 3656, 3682,
     3692, 3694, 3698, 3710, 3731, 3746, 3747, 3748, 3772, 3784,
     3795, 3801, 3802, 3818, 3838, 3844, 3855, 3848,    0,    0,
     2197, 2226,    0, 2251, 2249, 2272, 2270, 2274, 2274, 2310,
     2323,    0, 2329, 2332, 2361, 2372, 2395,    0, 2385, 2398,
     2436, 2440, 2430, 2446, 2463, 2474,    0, 2477, 2479,    0,
     2488, 2494,    0,    0, 2501, 2523, 2518, 2533,    0,    0,
        0,    0, 2573, 2583, 2577,    0,    0, 2594, 2590, 2592,

     2610, 2623, 2629,    0, 2642, 2643, 2625, 2642, 2650, 2658,
     2642, 2661, 2672, 2700, 2714, 2732,    0, 2743, 2755, 2756,
        0, 2745, 2757, 2786, 2798,    0, 3864, 3885, 3889, 3906,
     3900, 3918, 3934, 3943, 3954, 3955, 3972, 3984, 3988, 4008,
     4009, 4025, 4032, 4050, 4071, 4068, 4074, 4078, 4094, 4117,
     4119, 4123, 4140, 4165, 4161, 4171, 4177, 4181, 4214, 4218,
     4220, 4224, 4248, 4266, 4263, 4272, 4269, 4273, 4302, 4311,
     4322, 4318, 4352, 4328, 4348, 4372, 4369, 4378, 4402, 4422,
     4411, 4423, 4432, 4439, 4456, 4465, 4477, 4476, 4480, 4501,
     4510, 4519, 4526, 4530, 4547, 4563, 4575, 4578, 4572, 4584,

     4593, 4614, 4621, 4617, 2795,    0, 2787,    0, 2803, 2813,
     2828,    0, 2849,    0, 2865, 2890, 2888, 2895,    0,    0,
     2914,    0,    0,    0, 2928,    0, 2957, 2975,    0,    0,
     2997,    0, 3007, 3021,    0, 3018, 3036,    0, 3019, 3037,
     3058, 3074,    0, 3088, 3094, 3095,    0, 3108,    0, 3117,
        0, 3134, 3146, 3143, 3162, 3147,    0,    0,    0,    0,
     3178, 3163, 3187, 4632, 4638, 4642, 4662, 4663, 4680, 4683,
     4686, 4711, 4687, 4728, 4732, 4752, 4734, 4749, 4770, 4780,
     4773, 4782, 4798, 4819, 4816, 4823, 4826, 4844, 4847, 4862,
     4864, 4880, 4901, 4890, 4905, 4921, 4931, 4946, 4964, 4949,

     4967, 4970, 4985, 5003, 4988, 5006, 5013, 5024, 5036, 5039,
     5060, 5062, 5072, 5093, 5096, 5103, 5114, 5121, 5132, 5144,
     5150, 5147,    0,    0,    0,    0,    0,    0, 3220, 3234,
        0,    0, 3220,    0,    0,    0,    0,    0, 3247,    0,
     3258, 3273,    0,    0, 3284, 3272, 3296,    0, 3312,    0,
     3317, 3324,    0, 3320, 3346, 3379,    0,    0, 5165, 5168,
     5175, 5186, 5193, 5196, 5217, 5219, 5229, 5240, 5247, 5250,
     5265, 5268, 5271, 5283, 5289, 5299, 5309, 5320, 5327, 5330,
     5345, 5363, 5351, 5366, 5381, 5384, 5402, 5405, 5417, 5420,
     5450, 5454, 5438, 5456,    0, 3379,    0, 3392,    0, 3399,

     3435,    0,    0,    0, 3421, 3455, 3470,    0, 3465, 5471,
     5474, 5492, 5499, 5495, 5516, 5537, 5525, 5541, 5553, 5570,
     5574, 5591, 5590, 5600, 3486,    0, 3473, 3484,    0,    0,
     3536,    0, 5607, 5624, 5628, 5644, 5645, 5648, 5665, 5654,
        0,    0,    0, 3539, 5669, 5690, 5699, 5702,    0, 5706,
     5789, 5764, 5768,  138, 5772, 5776, 5780, 5784
    } ;

static yyconst flex_int16_t yy_def[1059] =
    {   0,
     1051,    1, 1051,    3, 1051, 1051, 1051, 1051, 1052, 1051,
     1053, 1051, 1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1055,
     1055, 1051, 1056, 1055, 1057, 1055, 1055, 1055, 1055, 1055,
     1058, 1058,   52,   52,   52,   52,   56,   52,   52,   52,
       52,   52,   52,   52,   59,   59,   59,   52,   52,   52,
       59,   59,   59, 1051, 1052, 1053, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,

     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1055, 1055, 1056,
     1057, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   52,   59,   59,   59,   59,   59,   59,   59,
       52,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       52,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   64,   59,   59,   59,   59,   59,
       59,   59, 1051, 1051, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,

     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1055, 1055,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   52,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,

     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,

     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59, 1054, 1054, 1054, 1054, 1054, 1054,

     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054,   59,   59,   59,   59,   59,   59,   59,   59,
     1054, 1054, 1054, 1054,   59,   59,   59,   59, 1054,   59,
        0, 1051, 1051, 1051, 1051, 1051, 1051, 1051
    } ;

static yyconst flex_int16_t yy_nxt[5855] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   80,   81,   82,   83,   86,   91,
       87,   85,  105,   92,  112,  119,   88,  106,   89,   93,
      113,  120,  124,   90,  114,  116,  125,  159,   74,   94,
       74,   74,  115,  117,  245,   86,   91,   87,  118,  105,
       92,  112,  119,   88,  106,   89,   93,  113,  120,  124,
       90,  114,  116,  125,  348,  134,   94,   95,  121,  115,
      117,  245,  122,  246,   96,  118,  135,  126,  123,  137,

      244,   97,  136,  138,   98,   99,  165,  166,  348,  139,
      164,  127,  134,  162,   95,  121,  251,  128,  129,  122,
      246,   96,  255,  135,  126,  123,  137,  130,   97,  136,
      138,   98,   99,  100,  256,  131,  139,  101,  127,  132,
      154,  102,  133,  251,  128,  129,  347,  103,  155,  255,
      104,  167,  168,  151,  130,  152,   74,   74,  153,  259,
      100,  256,  131,  244,  101,  265,  132,  154,  102,  133,
      156,  157,   80,   81,  103,  155,  266,  104,  107,  170,
      151,  108,  152,  170,  109,  153,  259,  110,   79,  204,
      111,   77,  265,  159,   74,  165,  166,  156,  157,  170,

      274,  243,  169,  266,  164,  107,  170,  163,  108,  205,
      170,  109,  249,  170,  110,  250,  204,  111,  140,  170,
      141,  252,  253,  142,  272,  273,  170,  274,  143,  170,
      144,  145,  162,  206,  209,  254,  205,  207,  210,  249,
      170,  158,  250,  208,  170,  140,  170,  141,  252,  253,
      142,  272,  273,  170,  170,  143,  170,  144,  145,  146,
      206,  209,  254,  147,  207,  210,  170,  148,  257,  275,
      208,  170,  276,  149,  170,  258,  150,   84,   79,  170,
      170,  170,   78,   77, 1051, 1051,  146, 1051, 1051, 1051,
      147, 1051, 1051,  170,  148,  257,  275,  281, 1051,  276,

      149,  170,  258,  150,  158,  158,  170,  158,  158,  158,
      158,  158,  222,  158,  158,  158,  223,  247,  170,  171,
      263,  172,  224,  282,  281,  248,  236,  173,  237,  174,
      264,  238,  170,  283,  175, 1051, 1051,  284, 1051,  222,
     1051, 1051, 1051,  223,  247,  170,  171,  263,  172,  224,
      282, 1051,  248,  236,  173,  237,  174,  264,  238,  170,
      283,  175,  158,  158,  284,  158,  158,  158,  158,  158,
      285,  158,  158,  158,  260,  261,  262,  277,  176,  278,
      286,  287,  177,  279,  288, 1051,  290,  289,  178,  296,
      280,  291,  297,  298,  299, 1051,  304,  285,  179, 1051,

     1051,  260,  261,  262,  277,  176,  278,  286,  287,  177,
      279,  288,  292,  290,  289,  178,  296,  280,  291,  297,
      298,  299,  293,  304,  305,  179,  180,  294,  295,  300,
      170,  301,  306,  181,  170,  302,  307,  303,  308,  292,
      182,  309,  310,  183,  184,  311,  312,  313,  314,  293,
      170,  305,  320,  180,  294,  295,  300,  170,  301,  306,
      181,  170,  302,  307,  303,  308,  321,  182,  309,  310,
      183,  184,  311,  312,  313,  314,  315,  170,  185,  320,
      316,  317,  186,  322,  325,  326,  187,  327,  323,  318,
      328,  329,  188,  321,  319,  189,  324,  332,  333,  334,

      339, 1051,  170,  315, 1051,  185,  340,  316,  317,  186,
      322,  325,  326,  187,  327,  323,  318,  328,  329,  188,
      330,  319,  189,  324,  332,  333,  334,  339,  335,  170,
      170,  331,  337,  340,  170,  338,  341,  345,  346,  343,
      170, 1051,  342, 1051,  190,  451, 1051,  330,  336,  191,
      170, 1051,  344, 1051,  452,  335,  453,  170,  331,  337,
      170,  170,  338,  341,  345,  346,  343,  170,  170,  342,
      367,  190,  451,  170,  170,  336,  191,  170,  170,  344,
      368,  452,  192,  453,  454,  193,  455,  170,  194,  456,
      170,  195, 1051,  457,  196,  170,  458,  367,  170, 1051,

      170,  170, 1051,  459,  349,  170,  170,  368, 1051,  192,
      460,  454,  193,  455,  170,  194,  456,  170,  195,  170,
      457,  196, 1051,  458,  461,  170,  170,  462,  463,  197,
      459,  349,  170,  170,  464,  198,  170,  460,  170, 1051,
      465,  170,  466, 1051,  170, 1051,  170, 1051, 1051,  170,
      350,  461, 1051,  170,  462,  463,  197,  355,  439,  170,
      170,  464,  198,  170,  469,  170,  199,  465,  170,  466,
      170,  170,  170,  170,  200,  170,  170,  350,  440,  170,
      170,  170,  359,  170,  355,  439,  470,  170,  170,  170,
      170,  469, 1051,  199,  170,  170, 1051,  170, 1051,  170,

      170,  200,  170,  471, 1051,  440,  170,  170,  170,  359,
      170, 1051,  170,  470,  474,  170,  170,  170,  170,  201,
      170,  170,  170,  170,  475,  170,  370,  202,  170, 1051,
      471,  170,  203,  476, 1051,  376,  377, 1051,  170,  170,
      467,  474, 1051, 1051,  468,  170,  201,  170,  170,  170,
      170,  475,  170,  370,  202,  170,  170,  360,  170,  203,
      476,  170,  376,  377,  363,  170,  211,  467,  477,  170,
      170,  468,  478, 1051,  170,  170,  479,  170, 1051,  480,
      212, 1051,  170,  170,  360,  481,  213,  214,  170, 1051,
      170,  363,  170,  211, 1051,  477,  170,  170,  361,  478,

      170,  170, 1051,  479,  170,  362,  480,  212,  170,  170,
     1051,  482,  481,  213,  214, 1051,  170,  170,  215,  170,
      483,  170, 1051, 1051,  369,  361,  216,  170,  484,  170,
      217,  170,  362,  218, 1051,  170, 1051,  170,  482, 1051,
     1051,  170,  170,  170,  378,  215, 1051,  483,  170,  170,
      379,  369, 1051,  216,  170,  484,  170,  217,  170,  380,
      218,  219,  170,  419,  170,  485,  170,  420,  170,  170,
      170,  378,  220,  170,  170,  170,  170,  379,  221,  170,
     1051,  170, 1051,  170,  486, 1051,  380, 1051,  219,  170,
      419, 1051,  485,  170,  420, 1051, 1051,  170,  487,  220,

      170,  170,  170,  488, 1051,  221,  170,  225,  170,  226,
      170,  486,  227,  170,  385,  170,  170,  228,  170,  229,
      230,  170,  472,  170,  386,  487,  170,  388,  170,  170,
      488,  170,  489, 1051,  225,  170,  226,  473, 1051,  227,
      170,  385,  170,  170,  228,  170,  229,  230,  170,  472,
      170,  386,  490,  170,  388,  170,  170,  231,  170,  489,
      170,  232,  491,  492,  473,  233,  493,  494,  170,  495,
      170,  234,  387,  170,  235,  496,  389,  497,  170,  490,
     1051,  170, 1051,  170,  231,  500, 1051,  170,  232,  491,
      492,  501,  233,  493,  494,  170,  495,  170,  234,  387,

      170,  235,  496,  389,  497,  170, 1051,  170,  170,  239,
      170,  502,  500,  170,  170,  170,  390,  240,  501,  503,
      170,  170,  170,  504,  170,  505,  392,  170, 1051,  393,
     1051, 1051,  170,  391,  170, 1051,  239,  170,  502,  506,
      170,  170,  170,  390,  240,  507,  503,  170,  170,  170,
      504,  170,  505,  392,  170,  170,  393,  241,  242,  170,
      391,  508,  170,  170,  170,  170,  506, 1051,  170, 1051,
      394, 1051,  507,  170, 1051,  395, 1051, 1051,  170, 1051,
     1051,  498,  170,  509,  241,  242,  170, 1051,  508,  170,
      170,  499,  170,  510,  400,  170,  267,  394,  268,  170,

      170,  269,  395,  170,  403,  170,  401,  270,  498, 1051,
      509,  170,  170,  170,  271, 1051,  170,  170,  499, 1051,
      510,  400,  511,  267,  170,  268,  170,  170,  269, 1051,
      170,  403,  170,  401,  270,  170,  408,  170,  170,  170,
      170,  271,  170,  170,  170,  170,  402,  512,  351,  511,
      170,  170,  513,  409,  170,  170,  352, 1051,  170,  170,
     1051,  514,  170,  408,  170, 1051, 1051,  170,  414,  170,
     1051,  515,  170,  402,  512,  351,  170,  170,  170,  513,
      409,  170,  170,  352,  353,  170,  170,  354,  514,  170,
      516,  170,  410,  170,  517,  414,  518,  170,  515,  519,

      520,  170,  170,  170, 1051,  170,  170,  411,  170,  521,
     1051,  353,  522,  170,  354, 1051,  170,  516,  170,  410,
      170,  517, 1051,  518,  170,  523,  519,  520,  170,  170,
      356,  357,  524,  170,  411,  525,  521,  413,  170,  522,
      526,  170,  170,  170,  358, 1051,  527,  412,  170,  170,
      170, 1051,  523, 1051,  170,  170,  170,  356,  357,  524,
      528,  170,  525,  529,  413,  170, 1051,  526,  170,  170,
      170,  358,  170,  527,  412,  170,  170,  170,  364,  365,
      366,  170,  170,  170,  530,  170, 1051,  528,  170,  531,
      529, 1051,  532,  415,  533,  170,  534, 1051,  535,  170,

      536,  537,  540,  170, 1051,  364,  365,  366,  170,  541,
     1051,  530,  170,  371, 1051,  372,  531,  542,  373,  532,
      415,  533,  170,  534,  374,  535,  170,  536,  537,  540,
      170,  375, 1051,  170, 1051,  170,  541,  538, 1051,  539,
      371,  170,  372,  543,  542,  373,  170,  416, 1051,  421,
      546,  374, 1051,  170, 1051,  547, 1051,  422,  375,  381,
      170,  382,  423,  548,  538,  383,  539,  170,  170, 1051,
      543,  170,  384,  170,  416,  170,  421,  546,  418,  417,
      170,  170,  547,  170,  422, 1051,  381, 1051,  382,  423,
      548,  170,  383, 1051,  170, 1051,  170, 1051,  170,  384,

     1051,  549,  170,  649,  170,  418,  417,  170,  170,  396,
      170,  170,  170,  429,  170,  424, 1051,  170,  170,  397,
      544,  545,  170,  170,  398,  399, 1051,  170,  549,  650,
      649,  170,  651, 1051, 1051,  652,  396,  170,  170,  170,
      429,  170,  424,  425,  170,  170,  397,  544,  545,  170,
      170,  398,  399,  170,  170,  170,  650,  426,  404,  651,
      405,  170,  652,  170,  170,  653,  170, 1051,  170, 1051,
      425,  654,  170,  430, 1051, 1051,  655,  170,  170,  656,
      170,  657,  170,  658,  426,  404,  170,  405,  170,  170,
      170,  170,  653,  170,  406,  170,  407,  170,  654,  170,

      430,  431,  170,  655,  432,  170,  656,  170,  657,  170,
      658,  659,  170,  170,  660,  661,  170,  170,  170, 1051,
      662,  406,  170,  407,  170,  663,  170, 1051,  431,  170,
      664,  432,  665,  433,  170,  666,  170,  170,  659,  170,
      170,  660,  661,  667,  170,  170,  427,  662,  170,  170,
      170, 1051,  663,  170,  428, 1051,  668,  664,  170,  665,
      433, 1051,  666, 1051,  170,  436,  437,  170, 1051,  669,
      667,  170,  170,  427,  670,  170,  671,  170,  170,  672,
      170,  428,  170,  668,  673,  170,  170,  674,  438,  434,
      170,  170,  436,  437,  675,  170,  669,  676,  170,  677,

      435,  670,  678,  671, 1051,  170,  672, 1051,  679,  170,
      443,  673,  170,  170,  674,  438,  434,  170,  170, 1051,
      170,  675,  170,  680,  676,  170,  677,  435,  170,  678,
      170,  441, 1051,  444,  442,  679,  170,  443,  170,  170,
      170,  170,  681,  170, 1051,  449,  170,  170,  170,  682,
      680,  683,  170,  170,  170,  170, 1051,  170,  441,  170,
      444,  442, 1051,  170, 1051,  170,  684,  170,  170,  681,
      170,  170,  449,  170,  170,  170,  682,  445,  683,  170,
      170,  170,  170,  446,  170, 1051,  170,  170,  450,  170,
      685,  550,  170,  684, 1051, 1051, 1051,  170,  170, 1051,

      170,  170,  170, 1051,  445,  170,  170,  688,  689,  170,
      446,  170,  447,  170,  170,  450,  170,  685,  550,  170,
      170,  170,  551,  170,  170,  448,  170,  170,  170,  170,
      686,  170,  170,  170,  688,  689,  170,  690,  170,  447,
      170,  687, 1051, 1051,  552, 1051,  170,  170,  170,  551,
      170,  170,  448,  170,  170,  170,  691,  686,  170,  692,
      170,  170,  170,  170,  690,  170, 1051,  170,  687,  170,
      553,  552,  170,  170,  170,  554, 1051, 1051,  170,  693,
      170,  170,  694,  691, 1051,  170,  692,  170,  170,  170,
      170, 1051,  695,  556,  170,  170,  170,  553,  170,  170,

      170,  170,  554,  170,  555,  170,  693,  170,  696,  694,
      697,  557,  170,  170,  170,  170,  698,  170,  170,  695,
      556,  558,  170,  170, 1051,  170,  699,  170,  170,  700,
      170,  555,  170,  559, 1051,  696,  170,  697,  557,  170,
      170,  701,  170,  698,  170,  170,  170,  170,  558,  170,
      170,  560,  170,  699,  170,  170,  700,  170, 1051,  170,
      559,  561,  564,  170,  562,  170,  170,  170,  701,  170,
      170,  170,  702,  170,  170,  170,  170,  170,  560,  170,
      170,  170,  170,  563,  170,  170,  170,  170,  561,  564,
      703,  562,  170,  170,  170,  170,  170,  170,  565,  702,

      170, 1051,  170,  704,  170, 1051, 1051,  170,  170,  170,
      563,  569,  170,  705,  170, 1051,  170,  703,  170, 1051,
      170,  170,  170,  706,  568,  565,  170,  170,  566,  570,
      704,  170,  567,  170,  170,  170,  707,  708,  569,  709,
      705,  170,  170,  170, 1051,  170,  170,  170,  170, 1051,
      706,  568, 1051,  170,  710,  566,  570, 1051,  170,  567,
      170,  170, 1051,  707,  708, 1051,  709,  573,  170,  170,
      170,  574,  170,  170,  170,  571,  170,  711,  170,  170,
      170,  710,  712,  170,  170,  170, 1051,  170,  713,  170,
      572, 1051,  170,  575,  573,  714,  576,  170,  574,  170,

      170, 1051,  571,  170,  711,  170,  170,  170,  170,  712,
      170,  170,  170,  170,  170,  713,  170,  572,  170,  170,
      575,  715,  714,  576,  578, 1051,  170,  170,  577,  170,
      170,  170,  579,  170,  716,  170,  580,  170,  170,  170,
      170,  170,  170,  581,  717,  170,  170,  170,  715, 1051,
     1051,  578,  170,  170,  718,  577,  170,  170,  170,  579,
      170,  716, 1051,  580,  170,  170,  170,  719,  170,  170,
      581,  717,  170,  170,  170,  583,  170,  584,  582,  170,
      170,  718,  170,  720,  170,  170, 1051,  585,  170,  170,
      170,  721, 1051, 1051,  719,  170,  170,  722, 1051,  170,

     1051,  170,  583,  170,  584,  582, 1051,  170,  723,  170,
      720,  170,  170,  170,  585,  170,  170,  170,  721,  170,
      586,  170,  170,  170,  722,  587,  170,  170,  170,  724,
      725,  726,  170,  588,  805,  723,  170,  170, 1051, 1051,
      170, 1051,  806, 1051,  170,  170,  170,  586,  170,  170,
      170,  589,  587,  170,  170, 1051,  724,  725,  726,  170,
      588,  805,  170,  170,  170,  591,  170,  807,  590,  806,
      170,  170,  170,  170,  170,  170,  170,  170,  589,  170,
      808,  170,  594,  170,  809,  810,  170,  592, 1051,  170,
      170,  170,  591,  170,  807,  590,  170,  170,  170,  811,

      170,  170,  170,  170,  593,  812,  170,  808,  170,  594,
      170,  809,  810,  170,  592,  595,  170,  170,  170,  596,
      170, 1051, 1051,  170,  170,  170,  811, 1051,  170,  170,
      170,  593,  812,  170,  597, 1051,  813,  170,  170,  814,
      170,  815,  595,  170,  598,  170,  596,  170,  600,  170,
      170,  170,  599,  170,  170,  170,  170,  170,  816, 1051,
      170,  597,  170,  813,  170,  170,  814,  170,  815,  602,
      170,  598,  170,  817,  170,  600,  170,  170,  170,  599,
      170,  170,  170,  170,  170,  816,  605,  170,  601,  170,
      170,  170,  604,  603,  170,  818,  602,  170,  170,  170,

      817,  170,  170,  170,  170,  170, 1051,  170, 1051,  170,
      170,  819, 1051,  605,  170,  601,  820,  170,  170,  604,
      603,  170,  818,  821,  170,  170,  170,  170,  606,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  819,  607,
      170,  170, 1051,  820,  170, 1051,  170, 1051,  608,  170,
      821,  170,  822, 1051,  170,  606,  823,  170, 1051,  170,
      170,  824,  170,  170,  170,  170,  607,  170,  170,  610,
      170,  170,  170,  170,  170,  608,  170,  825,  609,  822,
      170, 1051,  170,  823,  170,  170, 1051,  611,  824,  612,
      170, 1051,  170,  826,  827,  828,  610,  170,  170,  170,

      170,  170,  829,  170,  825,  609,  830,  170,  616,  170,
      613,  170,  170,  170,  611, 1051,  612,  170,  170,  170,
      826,  827,  828,  831,  170,  170,  170,  170,  617,  829,
      170,  170,  832,  830,  170,  616, 1051,  613,  170,  833,
      170,  618,  170, 1051, 1051,  170,  170,  170,  834,  620,
      831,  170,  614,  170,  170,  617,  835,  170,  170,  832,
     1051,  170,  170,  619,  170,  170,  833,  170,  618,  170,
      170,  615,  170, 1051,  170,  834,  620,  170, 1051,  614,
      170,  170,  622,  835,  170,  836, 1051,  170,  170,  170,
      619,  170,  170,  170,  170,  170, 1051,  170,  615,  170,

      170,  621,  837, 1051,  170,  170, 1051,  170,  838,  622,
      839,  623,  836,  170,  170,  170,  624,  170,  170,  840,
      170,  841,  170,  170, 1051,  170,  842,  170,  621,  837,
      170,  170,  170,  625,  170,  838,  170,  839,  623,  843,
      170, 1051,  170,  624,  170,  170,  840,  170,  841,  844,
      170,  170,  170,  842,  845,  846,  847,  170,  170,  170,
      625,  170,  848,  170,  170,  849,  843,  170,  626,  170,
      850,  170,  851,  627,  170,  170,  844, 1051,  170,  170,
      170,  845,  846,  847,  170,  628,  170, 1051, 1051,  848,
      852,  170,  849, 1051,  170,  626,  170,  850,  170,  851,

      627, 1051,  170,  853,  170,  170,  170,  170,  170,  170,
      629,  170,  628,  170,  630,  631,  170,  852,  170, 1051,
      170,  170, 1051,  170, 1051,  854,  855, 1051,  170, 1051,
      853,  170,  170,  170,  632,  170,  170,  629,  170, 1051,
      170,  630,  631,  170,  856,  170,  170,  170,  170,  633,
      170,  170,  854,  855,  170,  170,  170,  634,  170,  857,
      170,  632,  170,  170,  635,  170,  170,  170, 1051,  170,
      858,  856,  859,  170,  636,  860,  633,  170,  170,  170,
     1051,  170,  861,  170,  634,  170,  857,  640, 1051,  170,
      170,  635,  170,  170,  170,  170,  170,  858,  862,  859,

      170,  636,  860,  170,  639,  170,  170,  170,  170,  861,
      863,  923,  924,  170,  640,  170,  637, 1051,  638,  170,
      170,  641,  170, 1051, 1051,  862,  170,  170,  925,  926,
      170,  639,  170,  170,  170,  170,  170,  863,  923,  924,
      170,  170,  170,  637,  170,  638,  170,  170,  641,  170,
      645,  642, 1051,  170,  170,  925,  926,  170,  927,  648,
      170, 1051,  170,  170, 1051,  170,  647,  170,  170, 1051,
      170,  170,  928,  170,  170, 1051,  170,  645,  642,  643,
      644,  170,  170,  170,  170,  927,  648,  170,  646,  170,
      170,  170,  170,  647,  170,  929,  170,  170,  170,  928,

      170,  170,  727,  170,  930, 1051,  643,  644,  170,  170,
      170,  931,  728,  170,  170,  646, 1051,  170,  170, 1051,
     1051, 1051,  929,  170,  170,  170,  932,  170,  933,  727,
      170,  930,  170,  170,  170,  170, 1051,  170,  931,  728,
      170,  170,  731,  729,  934,  730,  170,  170,  732,  170,
      170,  170, 1051,  932, 1051,  933, 1051,  170,  733,  170,
      170,  170,  170,  170,  170, 1051, 1051, 1051,  170,  731,
      729,  934,  730,  170,  170,  732,  170,  170,  734,  170,
      170,  735,  935,  170,  170,  733,  170,  170,  170,  170,
      170,  170,  170,  170,  170, 1051,  170, 1051, 1051,  170,

      936, 1051, 1051, 1051,  170,  734,  170,  170,  735,  935,
      170,  736,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  737,  170,  936,  738,  170,
      170,  170,  170,  937,  170,  170,  938,  939,  736,  170,
      170,  940,  170,  170,  170,  170,  739,  740,  941,  170,
      942,  170,  737,  943,  741,  738,  170,  170,  170,  170,
      937,  170,  170,  938,  939, 1051,  170,  170,  940,  170,
      170,  170,  170,  739,  740,  941,  170,  942,  170,  170,
      943,  741,  742,  170,  170,  170,  743,  170, 1051,  170,
     1051, 1051,  170,  170,  944, 1051, 1051,  170,  170,  945,

     1051, 1051,  946,  170,  170,  170,  170,  170,  947,  742,
      170,  170,  170,  743,  170,  170,  170,  170,  745,  170,
      170,  944,  744,  746,  170,  948,  945,  747,  170,  946,
      170,  170,  170,  949,  170,  947,  170,  170,  170,  170,
      950,  170,  170,  170,  170,  745,  951,  170, 1051,  744,
      746,  170,  948,  170,  747,  170,  748,  170,  952,  170,
      949,  170, 1051,  170,  170,  170,  170,  950,  170,  170,
      170,  170, 1051,  951,  953,  749,  954,  170,  955,  170,
      170,  170,  170,  748,  170,  952, 1051,  170,  170,  170,
      956,  750,  957,  170,  170,  170,  170,  751,  170,  170,

      170,  953,  749,  954,  170,  955,  170,  170,  170,  170,
      958,  170,  170,  753,  170,  170,  170,  956,  750,  957,
      754,  170,  170,  170,  751,  170,  170,  170,  170, 1051,
      752, 1051, 1051,  170,  170,  170,  995,  958,  170,  170,
      753,  170,  170,  170,  756,  170,  996,  754,  170,  170,
      170,  997,  170,  170,  170,  170,  170,  752,  170,  755,
      170,  998,  170,  995,  170,  170,  170, 1051,  170,  170,
      170,  756,  170,  996,  170,  170,  170,  757,  997,  170,
      170,  170,  170,  170,  170,  170,  755,  999,  998, 1000,
      170,  170,  170,  170,  758,  170,  170,  170, 1001,  170,

      170,  170,  170, 1002,  757, 1051,  170,  170,  759,  170,
      170,  170,  170,  170,  999,  170, 1000,  170, 1003,  170,
      170,  758,  170,  170,  170, 1001,  170,  170,  170,  170,
     1002,  170,  760,  170,  170,  759,  170,  170,  761,  170,
      170,  170,  170, 1004,  170, 1003, 1005,  170, 1006,  170,
      170, 1007,  170,  762,  170,  170,  763,  170,  170,  760,
      170,  170, 1008,  170,  170,  761, 1051, 1051,  170,  170,
     1004,  170,  170, 1005,  170, 1006,  170,  170, 1007,  170,
      762,  170,  170,  763,  170,  170,  764, 1051,  170, 1008,
      170,  170, 1051,  170,  170,  170,  170,  765,  170,  170,

      766,  170,  170,  170,  170, 1051,  170,  170, 1009,  170,
     1025,  170,  170,  764,  170, 1051,  170,  170,  170,  170,
      170,  170,  170, 1026,  765,  170,  170,  766, 1027,  170,
      170,  170,  767,  170,  170, 1009,  170, 1025,  170, 1051,
     1051,  170,  768,  170,  170,  170,  170,  769,  170,  170,
     1026, 1028,  170,  170,  170, 1027,  170, 1029,  170,  767,
      170,  170,  170,  170,  170,  770,  771,  170, 1051,  768,
     1051,  170,  170, 1051,  769,  170,  170,  170, 1028,  170,
     1051,  170, 1030,  170, 1029, 1051, 1051,  170,  170,  170,
     1031,  170,  770,  771,  170,  772,  773,  170,  170,  170,

      170, 1032, 1041, 1042,  170,  170,  170,  170,  170, 1030,
      170,  170,  774,  170, 1043,  170, 1051, 1031,  170,  775,
      170, 1051,  772,  773,  170,  170,  170,  170, 1032, 1041,
     1042,  170,  170,  170,  170,  170,  170,  170,  170,  774,
      170, 1043,  170,  776,  170,  170,  775,  170,  170,  170,
     1051, 1051, 1051,  170,  777,  778,  170, 1051,  170,  170,
      170,  170, 1044,  170, 1049, 1051,  170,  170,  170, 1051,
      776,  170,  170,  170,  170,  170,  170,  170,  779,  170,
     1051,  777,  778,  170,  780,  170,  170,  170,  170, 1044,
      170, 1049, 1051,  170,  170,  170, 1051, 1051, 1051,  170,

      170,  170,  170, 1051,  170,  779,  170, 1051,  170, 1051,
      170,  780,  170, 1051,  781,  170,  170,  170, 1051,  783,
      170,  170,  782,  170, 1051, 1051, 1051,  784,  170,  170,
     1051,  170,  170,  170, 1051,  170,  170,  170, 1051, 1051,
      170,  781,  170,  170, 1051,  170,  783,  170,  170,  782,
      170, 1051, 1051,  785,  784,  170,  170, 1051,  170,  170,
      170, 1051,  170,  170,  170,  787,  170,  170,  786,  170,
      170, 1051,  170,  170,  170,  170,  788, 1051, 1051,  170,
      785,  170, 1051,  170, 1051, 1051,  170, 1051, 1051,  170,
     1051,  170,  787,  170, 1051,  786,  170,  170,  789,  170,

      170,  170,  170,  788, 1051, 1051,  170,  170,  170,  170,
     1051,  170,  170,  170, 1051,  170, 1051,  170,  790,  170,
     1051, 1051,  170,  170,  170,  789,  170,  170,  791, 1051,
      792, 1051, 1051, 1051,  170,  170,  170, 1051,  170,  170,
      170, 1051,  170, 1051,  170,  790,  170, 1051,  170,  170,
      170,  170, 1051, 1051,  170,  791,  170,  792, 1051, 1051,
      794,  793,  170,  170,  170,  170, 1051,  170, 1051, 1051,
     1051,  170,  795,  170, 1051,  170,  170,  170,  170, 1051,
      796, 1051, 1051,  170,  797, 1051, 1051,  794,  793,  170,
      170,  170,  170, 1051, 1051, 1051, 1051,  170,  170,  795,

      170,  170,  170,  170,  170,  170, 1051,  796, 1051,  170,
     1051,  797,  170,  799,  170,  798,  170,  800,  170,  170,
      170, 1051,  801, 1051,  170,  170,  170,  170,  170,  170,
     1051,  170,  170, 1051, 1051,  170,  170,  802, 1051,  170,
      799,  170,  798,  170,  800,  170,  170,  170,  170,  801,
     1051, 1051,  170,  170,  170,  170, 1051, 1051,  170,  170,
     1051,  170,  170,  170,  802,  170, 1051, 1051,  170,  170,
      170,  804,  170,  170,  170,  170,  803, 1051,  170, 1051,
      170,  170,  170, 1051, 1051,  170, 1051, 1051,  170,  170,
      170, 1051,  170, 1051,  170,  170,  170, 1051,  804,  170,

      170,  170,  170,  803, 1051,  170,  170,  170,  170, 1051,
      170, 1051,  170, 1051,  170,  170,  170,  170, 1051,  170,
     1051,  170,  865,  170, 1051,  170,  864, 1051, 1051,  170,
      170,  170, 1051,  170,  866,  170,  170,  170, 1051, 1051,
     1051,  170,  170,  170,  170, 1051,  170, 1051,  170,  865,
      170,  170,  170,  864, 1051,  868, 1051,  170,  170,  170,
      170,  866,  170,  170,  170,  867, 1051, 1051,  170,  869,
      170,  170,  170,  170, 1051,  170, 1051, 1051,  170,  170,
      870, 1051,  868, 1051,  170,  170,  170,  170, 1051,  170,
     1051,  170,  867, 1051, 1051,  170,  869,  170,  170,  170,

      170,  170,  170,  871,  873,  170,  170,  870, 1051,  170,
      872,  170,  170,  170,  170, 1051,  170, 1051,  170, 1051,
     1051,  874, 1051, 1051,  170,  170,  170, 1051,  170,  170,
      871,  873,  170,  170,  170, 1051,  170,  872,  170,  170,
      170,  170,  170, 1051,  876,  170, 1051, 1051,  874,  170,
      170,  875,  170,  170, 1051,  170, 1051,  170, 1051, 1051,
      170,  170,  170, 1051, 1051,  170,  170,  170, 1051,  170,
     1051,  876, 1051,  877, 1051,  170,  170,  170,  875, 1051,
      170, 1051,  170, 1051,  170,  170, 1051,  878,  170,  170,
     1051,  170, 1051,  170,  170,  170,  170, 1051,  170,  170,

      877,  170,  170,  880,  170,  879, 1051,  170,  170, 1051,
      881,  170,  170, 1051,  878,  170, 1051, 1051,  170,  170,
      170, 1051,  170,  170,  170,  170,  170, 1051,  170, 1051,
      880,  170,  879,  882,  170,  170,  170,  881,  170, 1051,
      170, 1051,  170, 1051,  170, 1051,  170,  170,  170,  170,
      883,  170, 1051,  170,  884, 1051, 1051,  170, 1051, 1051,
      882,  170, 1051,  170, 1051,  170, 1051,  170, 1051,  170,
      885,  170, 1051, 1051,  170,  170,  170,  883,  170, 1051,
      170,  884,  170, 1051,  170,  886,  170, 1051,  170,  887,
      170,  170,  170, 1051,  170,  170,  170,  885,  170, 1051,

      888,  170,  170, 1051, 1051,  170,  170,  170, 1051,  170,
     1051,  170,  886,  170, 1051,  170,  887,  170,  170, 1051,
     1051,  170,  170,  170, 1051,  170, 1051,  888,  170,  170,
     1051,  170,  889,  170,  170,  170, 1051,  170,  170,  170,
     1051,  170, 1051,  170,  170,  170, 1051,  890,  170,  170,
      170, 1051, 1051, 1051,  170, 1051, 1051, 1051,  170,  889,
     1051, 1051,  170, 1051,  170,  170,  170, 1051,  170, 1051,
      170,  170,  170,  170,  890,  170,  170,  170,  170,  891,
      170,  170,  892,  170, 1051, 1051,  170, 1051,  170,  170,
      170,  170,  170,  893,  170,  894,  170,  170,  170,  170,

      170, 1051,  170,  170, 1051,  170,  891,  170, 1051,  892,
      170, 1051, 1051,  170, 1051,  170,  170,  170,  170,  170,
      893,  170,  894,  170,  170,  170,  170,  170,  170,  170,
      170, 1051,  170, 1051,  895,  170,  170,  896, 1051,  170,
     1051,  170, 1051,  170, 1051,  170,  170,  170,  170, 1051,
     1051, 1051,  170,  170,  170,  170, 1051, 1051,  170,  170,
     1051,  895,  170,  170,  896,  170,  170, 1051,  170,  170,
      170, 1051,  170,  170,  170,  170, 1051,  170,  170,  170,
      170, 1051,  170,  897, 1051,  170,  170, 1051,  898,  170,
     1051, 1051,  170, 1051,  170,  170,  170,  170,  899,  170,

      170, 1051,  170,  170,  170,  170, 1051,  900,  170,  170,
      897, 1051, 1051,  170, 1051,  898,  170, 1051,  901,  170,
     1051,  170,  170, 1051,  170,  899,  170,  170,  170,  170,
      170,  903,  170, 1051,  900,  170,  170, 1051,  902,  170,
      170,  170, 1051, 1051,  904,  901,  170,  170,  170,  170,
     1051,  905,  170,  170,  170,  170,  170,  170,  903,  170,
     1051, 1051,  170,  170,  170,  902,  170,  170,  170,  170,
     1051,  904, 1051,  170,  170,  170,  170, 1051,  905,  170,
      170,  170,  170,  170,  170,  907,  170,  906,  909,  170,
      170,  170,  908,  170,  170,  170,  170,  170, 1051, 1051,

      170,  170,  170, 1051, 1051,  170,  170,  170,  170,  170,
      910, 1051,  907,  170,  906,  909, 1051,  170,  170,  908,
      170,  170,  170, 1051,  170, 1051,  170,  170,  170,  170,
      911,  170,  170,  170,  170,  170,  170,  910,  914, 1051,
      170,  912,  915,  170,  913,  170, 1051,  170, 1051,  170,
     1051,  170, 1051,  170,  170,  170,  170,  911,  170, 1051,
      170, 1051,  170,  170,  170,  914, 1051,  170,  912,  915,
      170,  913,  170, 1051,  170, 1051,  170,  170,  170,  916,
      170, 1051,  170,  170, 1051, 1051, 1051,  170,  170,  170,
      917,  170,  170,  170,  918,  170, 1051,  170, 1051,  170,

      170,  170,  170,  170,  170,  170,  916,  170,  170,  170,
      170, 1051, 1051, 1051,  919,  170,  170,  917,  920,  170,
      170,  918,  170,  170,  170, 1051,  921,  170,  170,  170,
      170,  170,  170,  922,  170,  170,  170,  170,  170,  170,
     1051,  919,  170, 1051,  170,  920,  170,  170,  959,  170,
      170,  170, 1051,  921, 1051,  170, 1051,  170,  170,  170,
      922,  170,  170,  170, 1051,  170,  170,  960,  170,  170,
     1051,  170,  170,  170,  170,  959,  170, 1051,  170,  170,
      170, 1051,  170, 1051,  170, 1051,  170,  170,  961,  170,
      170, 1051,  170,  170,  960,  170,  962,  170, 1051,  170,

      170, 1051, 1051,  170,  170,  170,  170,  170,  170, 1051,
      170,  170,  170,  963,  170,  961,  170,  170, 1051,  170,
      170, 1051, 1051,  962,  170, 1051, 1051,  170,  170, 1051,
      170,  170,  170, 1051,  964,  170,  170,  170,  170,  170,
      963,  170, 1051,  170,  170,  170,  966, 1051, 1051,  170,
     1051,  170, 1051,  170, 1051,  170, 1051,  170,  965,  170,
     1051,  964,  170,  170,  170,  968,  170, 1051,  170,  170,
     1051, 1051,  170,  966,  170,  967,  170,  170,  170,  170,
      170, 1051,  170, 1051,  170,  965,  170,  170, 1051,  170,
      170,  170,  968,  170,  969,  170,  170,  170,  170,  170,

      170,  170,  967,  170,  170,  170,  170,  170, 1051,  170,
      170, 1051,  170, 1051,  170,  170, 1051,  170, 1051, 1051,
     1051,  969,  170,  170,  170,  170,  170,  170,  170, 1051,
      170, 1051,  170,  170,  170,  970,  170,  170, 1051,  170,
      170,  170,  170,  170,  170, 1051,  170, 1051,  971,  170,
      170,  972, 1051,  170, 1051,  170,  170, 1051, 1051, 1051,
      170,  170,  970,  170,  170, 1051, 1051,  170,  170,  170,
      170,  170,  170,  170,  170,  971,  170,  170,  972,  170,
      170,  170, 1051,  170, 1051, 1051, 1051,  170,  170,  170,
     1051,  170,  170, 1051,  170, 1051,  170,  170,  973,  170,

     1051,  170, 1051, 1051,  170,  170,  170,  170,  170,  974,
      170, 1051, 1051, 1051,  170,  170,  170,  975,  170,  170,
      170,  170,  170, 1051,  170,  973,  170, 1051,  976, 1051,
      170,  170,  170,  977,  170,  170,  974,  170,  170, 1051,
     1051, 1051,  170, 1051,  975,  170,  170,  170,  170,  170,
     1051,  170, 1051,  170, 1051,  976,  170,  170,  170, 1051,
      977,  170,  170,  170, 1051,  170,  170, 1051, 1051, 1051,
     1051,  170, 1051,  170,  170,  170,  170,  978,  170,  170,
      979,  170, 1051,  170,  170,  980, 1051,  170,  170,  170,
      170, 1051,  981,  170,  170,  170, 1051,  170,  170,  982,

      170,  170,  170,  170,  978,  170,  170,  979,  170, 1051,
      170,  170,  980,  170,  170,  170,  170,  983,  984,  981,
      170,  170,  170,  170,  170, 1051,  982,  170,  170,  170,
      170,  170,  170,  170, 1051, 1051,  170,  170,  985, 1051,
      170,  170,  170,  170,  983,  984, 1051,  170, 1051,  170,
      170, 1051, 1051,  170,  170,  170,  170,  170,  170,  986,
      170,  170, 1051,  170,  170,  985,  170, 1051,  170,  170,
      170, 1051,  987, 1051,  988, 1051,  170,  170, 1051,  170,
      170,  170, 1051,  170, 1051,  170,  986,  170,  170,  170,
      170,  170,  170,  170, 1051, 1051,  170,  170, 1051,  987,

     1051,  988,  170,  989,  170, 1051,  170,  990, 1051, 1051,
      170, 1051,  170,  170,  170, 1051,  170,  170,  170,  170,
      170,  170, 1051,  170,  170, 1051,  170,  991,  170,  170,
      989,  170, 1051,  170,  990, 1051, 1051,  170,  170,  170,
      170, 1051, 1051, 1051,  170,  170,  170,  170,  170,  170,
      170,  170, 1051,  170,  991,  170,  992,  170,  170, 1051,
      170,  170,  170, 1051,  170,  170,  170,  170, 1051,  170,
      994,  170,  170,  170,  170,  170,  170,  170,  170,  993,
      170, 1051,  170,  992,  170,  170, 1051, 1051,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  994,  170,  170,

      170,  170,  170,  170,  170,  170,  993,  170, 1051,  170,
      170,  170,  170,  170, 1051, 1051,  170,  170,  170,  170,
      170,  170,  170,  170, 1051,  170,  170,  170, 1051, 1051,
      170, 1011,  170, 1010,  170, 1051,  170,  170,  170, 1051,
      170, 1051,  170,  170,  170,  170,  170,  170,  170,  170,
      170, 1051, 1051,  170,  170, 1051, 1051,  170, 1011,  170,
     1010,  170, 1051,  170,  170,  170, 1051,  170, 1051,  170,
      170,  170,  170,  170,  170,  170,  170,  170, 1012, 1051,
      170,  170,  170, 1051,  170,  170,  170, 1051,  170, 1051,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170, 1013,  170, 1012,  170,  170,  170,  170,
     1051, 1051,  170,  170,  170,  170,  170,  170, 1051,  170,
      170, 1051,  170,  170,  170,  170,  170,  170,  170,  170,
     1013, 1051, 1051,  170,  170,  170, 1015,  170, 1014,  170,
      170,  170, 1051,  170,  170,  170,  170,  170, 1051, 1051,
      170,  170,  170,  170, 1051,  170,  170,  170, 1051, 1016,
      170,  170,  170, 1015,  170, 1014,  170, 1051,  170, 1051,
      170,  170,  170, 1018,  170,  170,  170,  170, 1051,  170,
      170,  170,  170,  170,  170, 1051, 1016,  170,  170,  170,
     1051,  170, 1051,  170, 1017,  170,  170,  170,  170, 1051,

     1018,  170,  170,  170, 1051, 1051,  170,  170,  170,  170,
      170,  170, 1019, 1051,  170,  170, 1051, 1051,  170,  170,
      170, 1017,  170,  170, 1051,  170, 1051,  170,  170, 1021,
      170, 1020,  170,  170,  170,  170,  170,  170,  170, 1019,
     1051,  170,  170, 1051, 1051,  170,  170,  170, 1051,  170,
      170, 1022, 1051, 1051,  170,  170, 1021,  170, 1020,  170,
     1051,  170,  170,  170,  170, 1051, 1023,  170,  170,  170,
     1051,  170,  170,  170,  170,  170, 1051,  170, 1022,  170,
      170,  170,  170, 1024,  170, 1051,  170, 1051,  170, 1051,
      170,  170, 1051, 1023,  170,  170,  170, 1051,  170,  170,

      170,  170,  170, 1051,  170, 1033,  170,  170,  170,  170,
     1024,  170,  170,  170, 1051,  170,  170,  170,  170, 1051,
      170, 1051,  170,  170,  170,  170,  170, 1051,  170,  170,
     1034,  170, 1033,  170, 1051, 1051,  170, 1051, 1051,  170,
     1051,  170,  170,  170,  170, 1035,  170,  170, 1051,  170,
      170,  170,  170, 1036,  170,  170,  170, 1034,  170, 1051,
      170, 1051,  170, 1051, 1051, 1051,  170,  170,  170,  170,
      170,  170, 1035,  170, 1051, 1051, 1051,  170,  170, 1051,
     1036,  170,  170,  170, 1051,  170, 1051,  170, 1051,  170,
     1051,  170, 1051,  170,  170,  170, 1051,  170,  170,  170,

      170, 1038, 1051, 1051,  170,  170, 1037,  170,  170, 1051,
      170, 1039, 1051, 1051,  170,  170,  170,  170,  170, 1051,
      170,  170,  170, 1045,  170,  170,  170,  170, 1038, 1051,
      170,  170,  170, 1037,  170,  170, 1040,  170, 1039, 1051,
     1051,  170,  170,  170,  170,  170, 1051,  170,  170,  170,
     1045,  170,  170,  170,  170, 1051, 1051,  170, 1046,  170,
     1051,  170,  170, 1040,  170,  170, 1051, 1051,  170,  170,
      170,  170,  170,  170, 1047,  170,  170, 1051,  170,  170,
      170,  170,  170, 1051,  170, 1046,  170, 1051,  170,  170,
      170, 1048,  170, 1051,  170,  170,  170,  170,  170,  170,

      170, 1047,  170, 1051, 1051,  170,  170,  170, 1051,  170,
     1051,  170, 1051,  170, 1051,  170,  170,  170, 1048,  170,
      170,  170,  170,  170,  170, 1051,  170, 1050, 1051,  170,
     1051,  170,  170, 1051,  170, 1051,  170, 1051, 1051, 1051,
     1051, 1051,  170,  170, 1051, 1051,  170,  170, 1051, 1051,
      170,  170, 1051, 1051, 1050, 1051,  170, 1051,  170,  170,
     1051, 1051, 1051,  170,   75, 1051, 1051,   75,   76, 1051,
       76,   76,  158, 1051,  158,  158,  160, 1051,  160,  160,
      161, 1051,  161,  161,  170, 1051,  170,  170,    5, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,

     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051
    } ;

static yyconst flex_int16_t yy_chk[5855] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17, 1054,   21,   18,   23,   26,   17,   21,   17,   18,
       23,   27,   29,   17,   24,   25,   29,   41,   41,   18,
       42,   42,   24,   25,   86,   17,   18,   17,   25,   21,
       18,   23,   26,   17,   21,   17,   18,   23,   27,   29,
       17,   24,   25,   29,  348,   32,   18,   19,   28,   24,
       25,   86,   28,   87,   19,   25,   32,   30,   28,   34,

      244,   19,   32,   34,   19,   19,   48,   48,  165,   34,
      164,   30,   32,  161,   19,   28,   90,   30,   30,   28,
       87,   19,   92,   32,   30,   28,   34,   31,   19,   32,
       34,   19,   19,   20,   93,   31,   34,   20,   30,   31,
       38,   20,   31,   90,   30,   30,  160,   20,   38,   92,
       20,   49,   49,   37,   31,   37,   74,   74,   37,   96,
       20,   93,   31,   80,   20,   99,   31,   38,   20,   31,
       39,   39,   81,   81,   20,   38,  100,   20,   22,   60,
       37,   22,   37,   60,   22,   37,   96,   22,   79,   60,
       22,   76,   99,  159,  159,  166,  166,   39,   39,   60,

      103,   75,   50,  100,   47,   22,   60,   46,   22,   61,
       60,   22,   89,   61,   22,   89,   60,   22,   35,   61,
       35,   91,   91,   35,  102,  102,   60,  103,   35,   61,
       35,   35,   45,   62,   63,   91,   61,   62,   63,   89,
       61,   43,   89,   62,   63,   35,   61,   35,   91,   91,
       35,  102,  102,   62,   63,   35,   61,   35,   35,   36,
       62,   63,   91,   36,   62,   63,   67,   36,   95,  104,
       62,   63,  105,   36,   67,   95,   36,   16,   13,   67,
       62,   63,   12,   11,    5,    0,   36,    0,    0,    0,
       36,    0,    0,   67,   36,   95,  104,  107,    0,  105,

       36,   67,   95,   36,   51,   51,   67,   51,   51,   51,
       51,   51,   68,   51,   51,   51,   68,   88,   71,   51,
       98,   51,   68,  108,  107,   88,   71,   51,   71,   51,
       98,   71,   68,  109,   51,    0,    0,  110,    0,   68,
        0,    0,    0,   68,   88,   71,   51,   98,   51,   68,
      108,    0,   88,   71,   51,   71,   51,   98,   71,   68,
      109,   51,   52,   52,  110,   52,   52,   52,   52,   52,
      111,   52,   52,   52,   97,   97,   97,  106,   52,  106,
      112,  113,   52,  106,  114,    0,  115,  114,   52,  118,
      106,  115,  119,  120,  121,    0,  124,  111,   52,    0,

        0,   97,   97,   97,  106,   52,  106,  112,  113,   52,
      106,  114,  117,  115,  114,   52,  118,  106,  115,  119,
      120,  121,  117,  124,  125,   52,   53,  117,  117,  122,
       53,  122,  126,   53,   53,  123,  127,  123,  128,  117,
       53,  129,  130,   53,   53,  132,  133,  134,  135,  117,
       53,  125,  138,   53,  117,  117,  122,   53,  122,  126,
       53,   53,  123,  127,  123,  128,  139,   53,  129,  130,
       53,   53,  132,  133,  134,  135,  136,   53,   54,  138,
      136,  137,   54,  140,  142,  143,   54,  144,  141,  137,
      145,  146,   54,  139,  137,   54,  141,  148,  148,  149,

      152,    0,   54,  136,    0,   54,  153,  136,  137,   54,
      140,  142,  143,   54,  144,  141,  137,  145,  146,   54,
      147,  137,   54,  141,  148,  148,  149,  152,  150,   54,
       55,  147,  151,  153,   55,  151,  154,  156,  157,  155,
       55,    0,  154,    0,   55,  246,    0,  147,  150,   55,
       55,    0,  155,    0,  248,  150,  249,   55,  147,  151,
      170,   55,  151,  154,  156,  157,  155,   55,  170,  154,
      183,   55,  246,  170,  183,  150,   55,   55,   56,  155,
      183,  248,   56,  249,  252,   56,  253,  170,   56,  254,
      183,   56,    0,  255,   56,  170,  256,  183,   56,    0,

      170,  183,    0,  257,  171,   56,  171,  183,    0,   56,
      258,  252,   56,  253,  171,   56,  254,  183,   56,  171,
      255,   56,    0,  256,  259,   56,   57,  260,  261,   57,
      257,  171,   57,  171,  262,   57,  172,  258,   57,    0,
      263,  171,  264,    0,  172,    0,  171,    0,    0,  172,
      172,  259,    0,   57,  260,  261,   57,  175,  235,   57,
      175,  262,   57,  172,  267,   57,   58,  263,  175,  264,
       58,  172,  235,  175,   58,  179,  172,  172,  235,  235,
       58,  177,  177,  179,  175,  235,  268,  175,  179,  177,
       58,  267,    0,   58,  177,  175,    0,   58,    0,  235,

      175,   58,  179,  269,    0,  235,  235,   58,  177,  177,
      179,    0,  185,  268,  271,  179,  177,   58,   59,   59,
      185,  177,   59,  187,  272,  185,  185,   59,   59,    0,
      269,  187,   59,  273,    0,  187,  187,    0,   59,  185,
      266,  271,    0,    0,  266,   59,   59,  185,  178,   59,
      187,  272,  185,  185,   59,   59,  178,  178,  187,   59,
      273,  178,  187,  187,  181,   59,   64,  266,  274,  181,
       64,  266,  275,    0,   64,  178,  276,  181,    0,  277,
       64,    0,  181,  178,  178,  278,   64,   64,  178,    0,
       64,  181,  180,   64,    0,  274,  181,   64,  180,  275,

      180,   64,    0,  276,  181,  180,  277,   64,  184,  181,
        0,  279,  278,   64,   64,    0,  184,   64,   65,  180,
      280,  184,    0,    0,  184,  180,   65,  180,  281,  188,
       65,   65,  180,   65,    0,  184,    0,  188,  279,    0,
        0,  189,  188,  184,  188,   65,    0,  280,  184,  189,
      189,  184,    0,   65,  189,  281,  188,   65,   65,  190,
       65,   66,  190,  221,  188,  282,   66,  221,  189,  188,
      190,  188,   66,  221,   66,  190,  189,  189,   66,   66,
        0,  189,    0,  221,  283,    0,  190,    0,   66,  190,
      221,    0,  282,   66,  221,    0,    0,  190,  284,   66,

      221,   66,  190,  285,    0,   66,   66,   69,  192,   69,
      221,  283,   69,   69,  192,  193,  192,   69,  195,   69,
       69,  192,  270,  193,  193,  284,  195,  195,  193,   69,
      285,  195,  286,    0,   69,  192,   69,  270,    0,   69,
       69,  192,  193,  192,   69,  195,   69,   69,  192,  270,
      193,  193,  287,  195,  195,  193,   69,   70,  195,  286,
      194,   70,  288,  289,  270,   70,  290,  291,  194,  292,
      196,   70,  194,  194,   70,  293,  196,  294,  196,  287,
        0,   70,    0,  196,   70,  296,    0,  194,   70,  288,
      289,  297,   70,  290,  291,  194,  292,  196,   70,  194,

      194,   70,  293,  196,  294,  196,    0,  197,   70,   72,
      196,  299,  296,  199,   72,  197,  197,   72,  297,  300,
      197,  199,   72,  301,  198,  302,  199,   72,    0,  199,
        0,    0,  198,  198,  197,    0,   72,  198,  299,  303,
      199,   72,  197,  197,   72,  304,  300,  197,  199,   72,
      301,  198,  302,  199,   72,   73,  199,   73,   73,  198,
      198,  305,  200,   73,  198,  201,  303,    0,   73,    0,
      200,    0,  304,  201,    0,  200,    0,    0,  201,    0,
        0,  295,   73,  306,   73,   73,  203,    0,  305,  200,
       73,  295,  201,  308,  203,   73,  101,  200,  101,  203,

      201,  101,  200,  204,  206,  201,  204,  101,  295,    0,
      306,  204,  206,  203,  101,    0,  204,  206,  295,    0,
      308,  203,  309,  101,  209,  101,  203,  205,  101,    0,
      204,  206,  209,  204,  101,  205,  209,  209,  204,  206,
      205,  101,  173,  204,  206,  210,  205,  310,  173,  309,
      173,  209,  311,  210,  205,  173,  173,    0,  210,  209,
        0,  312,  205,  209,  209,    0,    0,  205,  215,  173,
        0,  313,  210,  205,  310,  173,  215,  173,  211,  311,
      210,  215,  173,  173,  174,  210,  211,  174,  312,  174,
      313,  211,  211,  212,  314,  215,  315,  174,  313,  316,

      317,  212,  174,  215,    0,  211,  212,  212,  215,  318,
        0,  174,  319,  211,  174,    0,  174,  313,  211,  211,
      212,  314,    0,  315,  174,  320,  316,  317,  212,  174,
      176,  176,  321,  212,  212,  322,  318,  214,  176,  319,
      323,  213,  214,  176,  176,    0,  325,  213,  216,  213,
      214,    0,  320,    0,  213,  214,  216,  176,  176,  321,
      326,  216,  322,  327,  214,  176,    0,  323,  213,  214,
      176,  176,  182,  325,  213,  216,  213,  214,  182,  182,
      182,  213,  214,  216,  328,  182,    0,  326,  216,  329,
      327,    0,  330,  217,  331,  217,  332,    0,  333,  182,

      335,  336,  338,  217,    0,  182,  182,  182,  217,  339,
        0,  328,  182,  186,    0,  186,  329,  340,  186,  330,
      217,  331,  217,  332,  186,  333,  186,  335,  336,  338,
      217,  186,    0,  218,    0,  217,  339,  337,    0,  337,
      186,  218,  186,  341,  340,  186,  218,  218,    0,  222,
      343,  186,    0,  186,    0,  344,    0,  222,  186,  191,
      218,  191,  222,  345,  337,  191,  337,  219,  218,    0,
      341,  191,  191,  218,  218,  219,  222,  343,  220,  219,
      219,  191,  344,  220,  222,    0,  191,    0,  191,  222,
      345,  220,  191,    0,  219,    0,  220,    0,  191,  191,

        0,  346,  219,  451,  227,  220,  219,  219,  191,  202,
      220,  202,  227,  227,  223,  223,    0,  227,  220,  202,
      342,  342,  223,  220,  202,  202,    0,  223,  346,  452,
      451,  227,  453,    0,    0,  454,  202,  224,  202,  227,
      227,  223,  223,  224,  227,  224,  202,  342,  342,  223,
      224,  202,  202,  207,  223,  225,  452,  225,  207,  453,
      207,  207,  454,  225,  224,  455,  207,    0,  225,    0,
      224,  456,  224,  228,    0,    0,  457,  224,  228,  458,
      207,  460,  225,  462,  225,  207,  228,  207,  207,  229,
      225,  228,  455,  207,  208,  225,  208,  229,  456,  208,

      228,  229,  229,  457,  230,  228,  458,  208,  460,  230,
      462,  463,  208,  228,  464,  465,  229,  230,  228,    0,
      466,  208,  230,  208,  229,  467,  208,    0,  229,  229,
      469,  230,  470,  231,  208,  471,  230,  231,  463,  208,
      226,  464,  465,  472,  230,  231,  226,  466,  226,  230,
      231,    0,  467,  226,  226,    0,  473,  469,  233,  470,
      231,    0,  471,    0,  231,  233,  233,  226,    0,  475,
      472,  233,  231,  226,  476,  226,  477,  231,  234,  479,
      226,  226,  232,  473,  480,  233,  234,  481,  234,  232,
      232,  234,  233,  233,  482,  232,  475,  483,  233,  485,

      232,  476,  486,  477,    0,  234,  479,    0,  489,  232,
      237,  480,  237,  234,  481,  234,  232,  232,  234,    0,
      237,  482,  232,  490,  483,  237,  485,  232,  236,  486,
      238,  236,    0,  238,  236,  489,  236,  237,  238,  237,
      349,  236,  492,  238,    0,  241,  241,  237,  349,  494,
      490,  495,  237,  349,  241,  236,    0,  238,  236,  241,
      238,  236,    0,  236,    0,  238,  496,  349,  236,  492,
      238,  239,  241,  241,  242,  349,  494,  239,  495,  239,
      349,  241,  242,  239,  239,    0,  241,  242,  242,  351,
      497,  350,  350,  496,    0,    0,    0,  351,  239,    0,

      350,  242,  351,    0,  239,  350,  239,  500,  504,  242,
      239,  239,  240,  240,  242,  242,  351,  497,  350,  350,
      354,  240,  352,  352,  351,  240,  240,  350,  354,  351,
      498,  352,  350,  354,  500,  504,  352,  506,  353,  240,
      240,  498,    0,    0,  353,    0,  353,  354,  240,  352,
      352,  353,  240,  240,  355,  354,  507,  498,  352,  508,
      354,  356,  355,  352,  506,  353,    0,  355,  498,  356,
      356,  353,  357,  353,  356,  357,    0,    0,  353,  509,
      357,  355,  511,  507,    0,  357,  508,  358,  356,  355,
      359,    0,  512,  359,  355,  358,  356,  356,  359,  357,

      358,  356,  357,  359,  358,  360,  509,  357,  513,  511,
      514,  360,  357,  360,  358,  361,  515,  359,  360,  512,
      359,  361,  358,  361,    0,  359,  518,  358,  361,  519,
      359,  358,  360,  362,    0,  513,  362,  514,  360,  363,
      360,  520,  361,  515,  362,  360,  364,  363,  361,  362,
      361,  363,  363,  518,  364,  361,  519,  365,    0,  364,
      362,  364,  367,  362,  365,  365,  363,  367,  520,  366,
      365,  362,  521,  364,  363,  367,  362,  366,  363,  363,
      367,  364,  366,  366,  365,  368,  364,  369,  364,  367,
      522,  365,  365,  368,  367,  369,  366,  365,  368,  521,

      369,    0,  367,  523,  366,    0,    0,  367,  372,  366,
      366,  372,  368,  524,  369,    0,  372,  522,  371,    0,
      368,  372,  369,  525,  371,  368,  371,  369,  370,  373,
      523,  371,  370,  370,  373,  372,  526,  528,  372,  529,
      524,  370,  373,  372,    0,  371,  370,  373,  372,    0,
      525,  371,    0,  371,  530,  370,  373,    0,  371,  370,
      370,  373,    0,  526,  528,    0,  529,  375,  370,  373,
      375,  376,  376,  370,  373,  374,  374,  531,  375,  377,
      376,  530,  532,  375,  374,  376,    0,  377,  534,  374,
      374,    0,  377,  377,  375,  535,  378,  375,  376,  376,

      378,    0,  374,  374,  531,  375,  377,  376,  378,  532,
      375,  374,  376,  378,  377,  534,  374,  374,  379,  377,
      377,  536,  535,  378,  380,    0,  379,  378,  379,  380,
      383,  379,  381,  381,  537,  378,  382,  380,  383,  382,
      378,  381,  380,  383,  538,  379,  381,  382,  536,    0,
        0,  380,  382,  379,  539,  379,  380,  383,  379,  381,
      381,  537,    0,  382,  380,  383,  382,  540,  381,  380,
      383,  538,  384,  381,  382,  385,  385,  386,  384,  382,
      384,  539,  386,  541,  385,  384,    0,  387,  387,  385,
      386,  542,    0,    0,  540,  386,  387,  543,    0,  384,

        0,  387,  385,  385,  386,  384,    0,  384,  544,  386,
      541,  385,  384,  388,  387,  387,  385,  386,  542,  389,
      388,  388,  386,  387,  543,  389,  388,  389,  387,  545,
      547,  548,  389,  390,  651,  544,  391,  390,    0,    0,
      388,    0,  652,    0,  391,  390,  389,  388,  388,  391,
      390,  391,  389,  388,  389,    0,  545,  547,  548,  389,
      390,  651,  393,  391,  390,  393,  392,  654,  392,  652,
      393,  391,  390,  394,  392,  393,  391,  390,  391,  392,
      655,  394,  396,  396,  656,  657,  394,  394,    0,  393,
      395,  396,  393,  392,  654,  392,  396,  393,  395,  658,

      394,  392,  393,  395,  395,  659,  392,  655,  394,  396,
      396,  656,  657,  394,  394,  397,  397,  395,  396,  398,
      398,    0,    0,  396,  397,  395,  658,    0,  398,  397,
      395,  395,  659,  398,  399,    0,  660,  400,  399,  661,
      401,  663,  397,  397,  399,  400,  398,  398,  401,  402,
      400,  397,  400,  401,  399,  398,  397,  402,  664,    0,
      398,  399,  402,  660,  400,  399,  661,  401,  663,  404,
      404,  399,  400,  665,  403,  401,  402,  400,  404,  400,
      401,  399,  403,  404,  402,  664,  407,  403,  403,  402,
      405,  407,  406,  405,  406,  666,  404,  404,  405,  407,

      665,  403,  406,  405,  407,  404,    0,  406,    0,  403,
      404,  667,    0,  407,  403,  403,  669,  405,  407,  406,
      405,  406,  666,  670,  409,  405,  407,  408,  408,  406,
      405,  407,  409,  410,  406,  408,  411,  409,  667,  409,
      408,  410,    0,  669,  411,    0,  410,    0,  410,  411,
      670,  409,  671,    0,  408,  408,  672,  413,    0,  409,
      410,  673,  408,  411,  409,  413,  409,  408,  410,  413,
      413,  411,  412,  410,  414,  410,  411,  674,  412,  671,
      412,    0,  414,  672,  413,  412,    0,  414,  673,  415,
      415,    0,  413,  675,  676,  678,  413,  413,  415,  412,

      418,  414,  679,  415,  674,  412,  681,  412,  418,  414,
      416,  416,  412,  418,  414,    0,  415,  415,  419,  416,
      675,  676,  678,  682,  416,  415,  419,  418,  419,  679,
      415,  419,  685,  681,  420,  418,    0,  416,  416,  686,
      418,  420,  420,    0,    0,  419,  416,  420,  687,  422,
      682,  416,  417,  419,  422,  419,  688,  417,  419,  685,
        0,  420,  422,  421,  421,  417,  686,  422,  420,  420,
      417,  417,  421,    0,  420,  687,  422,  421,    0,  417,
      424,  422,  424,  688,  417,  693,    0,  423,  424,  422,
      421,  421,  417,  424,  422,  423,    0,  417,  417,  421,

      423,  423,  694,    0,  421,  425,    0,  424,  695,  424,
      698,  425,  693,  425,  423,  424,  426,  426,  425,  699,
      424,  700,  423,  428,    0,  426,  701,  423,  423,  694,
      426,  428,  425,  427,  427,  695,  428,  698,  425,  702,
      425,    0,  427,  426,  426,  425,  699,  427,  700,  703,
      428,  429,  426,  701,  705,  706,  707,  426,  428,  429,
      427,  427,  708,  428,  429,  709,  702,  430,  429,  427,
      710,  431,  711,  430,  427,  430,  703,    0,  429,  431,
      430,  705,  706,  707,  431,  431,  429,    0,    0,  708,
      712,  429,  709,    0,  430,  429,  432,  710,  431,  711,

      430,    0,  430,  713,  432,  434,  431,  430,  433,  432,
      432,  431,  431,  434,  433,  434,  433,  712,  434,    0,
      435,  433,    0,  432,    0,  714,  715,    0,  435,    0,
      713,  432,  434,  435,  435,  433,  432,  432,  437,    0,
      434,  433,  434,  433,  716,  434,  437,  435,  433,  436,
      436,  437,  714,  715,  438,  435,  439,  437,  436,  718,
      435,  435,  438,  436,  439,  437,  440,  438,    0,  439,
      719,  716,  720,  437,  440,  722,  436,  436,  437,  440,
        0,  438,  723,  439,  437,  436,  718,  443,    0,  438,
      436,  439,  443,  440,  438,  442,  439,  719,  724,  720,

      443,  440,  722,  442,  442,  443,  440,  441,  442,  723,
      725,  805,  807,  444,  443,  441,  441,    0,  441,  443,
      441,  444,  442,    0,    0,  724,  444,  443,  809,  810,
      442,  442,  443,  447,  441,  442,  445,  725,  805,  807,
      444,  447,  441,  441,  445,  441,  447,  441,  444,  445,
      447,  445,    0,  444,  449,  809,  810,  450,  811,  450,
      447,    0,  449,  445,    0,  450,  449,  449,  447,    0,
      450,  445,  813,  447,  448,    0,  445,  447,  445,  446,
      446,  449,  448,  446,  450,  811,  450,  448,  448,  449,
      550,  446,  450,  449,  449,  815,  446,  450,  550,  813,

      551,  448,  550,  550,  816,    0,  446,  446,  551,  448,
      446,  817,  551,  551,  448,  448,    0,  550,  446,    0,
        0,    0,  815,  446,  552,  550,  818,  551,  821,  550,
      550,  816,  552,  553,  554,  551,    0,  552,  817,  551,
      551,  553,  554,  552,  825,  553,  553,  554,  555,  555,
      556,  552,    0,  818,    0,  821,    0,  555,  556,  552,
      553,  554,  555,  556,  552,    0,    0,    0,  553,  554,
      552,  825,  553,  553,  554,  555,  555,  556,  557,  557,
      558,  559,  827,  560,  555,  556,  559,  557,  558,  555,
      556,  560,  557,  558,  559,    0,  560,    0,    0,  559,

      828,    0,    0,    0,  561,  557,  557,  558,  559,  827,
      560,  561,  561,  559,  557,  558,  563,  561,  560,  557,
      558,  559,  562,  560,  563,  562,  559,  828,  563,  563,
      562,  561,  564,  831,  565,  562,  833,  834,  561,  561,
      564,  836,  565,  563,  561,  564,  564,  565,  837,  562,
      839,  563,  562,  840,  566,  563,  563,  562,  566,  564,
      831,  565,  562,  833,  834,    0,  566,  564,  836,  565,
      567,  566,  564,  564,  565,  837,  568,  839,  567,  569,
      840,  566,  568,  567,  568,  566,  569,  569,    0,  568,
        0,    0,  569,  566,  841,    0,    0,  567,  566,  842,

        0,    0,  844,  568,  571,  567,  569,  570,  845,  568,
      567,  568,  571,  569,  569,  570,  568,  571,  571,  569,
      570,  841,  570,  572,  573,  846,  842,  574,  572,  844,
      574,  571,  573,  848,  570,  845,  572,  573,  574,  571,
      850,  572,  570,  574,  571,  571,  852,  570,    0,  570,
      572,  573,  846,  575,  574,  572,  575,  574,  853,  573,
      848,  575,    0,  572,  573,  574,  575,  850,  572,  576,
      574,  577,    0,  852,  854,  576,  855,  576,  856,  577,
      575,  578,  576,  575,  577,  853,    0,  579,  575,  578,
      861,  578,  862,  575,  578,  579,  576,  579,  577,  581,

      579,  854,  576,  855,  576,  856,  577,  581,  578,  576,
      863,  577,  581,  581,  579,  580,  578,  861,  578,  862,
      582,  578,  579,  580,  579,  582,  581,  579,  580,    0,
      580,    0,    0,  582,  581,  583,  929,  863,  582,  581,
      581,  585,  580,  583,  585,  584,  930,  582,  583,  585,
      580,  933,  582,  584,  585,  580,  586,  580,  584,  584,
      582,  939,  583,  929,  586,  582,  587,    0,  585,  586,
      583,  585,  584,  930,  587,  583,  585,  588,  933,  587,
      584,  585,  588,  586,  589,  584,  584,  941,  939,  942,
      588,  586,  589,  587,  589,  588,  586,  589,  945,  590,

      591,  587,  592,  946,  588,    0,  587,  590,  591,  588,
      592,  589,  590,  591,  941,  592,  942,  588,  947,  589,
      594,  589,  588,  593,  589,  945,  590,  591,  594,  592,
      946,  593,  593,  594,  590,  591,  593,  592,  594,  590,
      591,  595,  592,  949,  596,  947,  951,  594,  952,  595,
      593,  954,  596,  595,  595,  594,  596,  596,  593,  593,
      594,  598,  955,  593,  600,  594,    0,    0,  595,  598,
      949,  596,  600,  951,  598,  952,  595,  600,  954,  596,
      595,  595,  601,  596,  596,  597,  597,    0,  598,  955,
      601,  600,    0,  597,  599,  601,  598,  597,  597,  600,

      599,  598,  599,  602,  600,    0,  604,  599,  956,  601,
      996,  602,  597,  597,  604,    0,  602,  601,  603,  604,
      597,  599,  601,  998,  597,  597,  603,  599, 1000,  599,
      602,  603,  603,  604,  599,  956,  605,  996,  602,    0,
        0,  604,  605,  602,  605,  603,  604,  606,  606,  605,
      998, 1001,  607,  603,  608, 1000,  606, 1005,  603,  603,
      607,  606,  608,  605,  609,  607,  608,  608,    0,  605,
        0,  605,  609,    0,  606,  606,  605,  609, 1001,  607,
        0,  608, 1006,  606, 1005,    0,    0,  607,  606,  608,
     1007,  609,  607,  608,  608,  610,  611,  611,  610,  609,

      612, 1009, 1025, 1027,  609,  611,  610,  613,  612, 1006,
      611,  610,  612,  612, 1028,  613,    0, 1007,  615,  613,
      613,    0,  610,  611,  611,  610,  615,  612, 1009, 1025,
     1027,  615,  611,  610,  613,  612,  614,  611,  610,  612,
      612, 1028,  613,  614,  614,  615,  613,  613,  616,  614,
        0,    0,    0,  615,  617,  618,  616,    0,  615,  617,
      618,  616, 1031,  614, 1044,    0,  619,  617,  618,    0,
      614,  614,  617,  618,  619,  616,  614,  620,  619,  619,
        0,  617,  618,  616,  620,  620,  617,  618,  616, 1031,
      620, 1044,    0,  619,  617,  618,    0,    0,    0,  617,

      618,  619,  621,    0,  620,  619,  619,    0,  622,    0,
      621,  620,  620,    0,  621,  621,  622,  620,    0,  623,
      624,  622,  622,  623,    0,    0,    0,  624,  624,  621,
        0,  623,  626,  624,    0,  622,  623,  621,    0,    0,
      626,  621,  621,  622,    0,  626,  623,  624,  622,  622,
      623,    0,    0,  625,  624,  624,  625,    0,  623,  626,
      624,    0,  627,  623,  625,  628,  628,  626,  627,  625,
      627,    0,  626,  629,  628,  627,  629,    0,    0,  628,
      625,  629,    0,  625,    0,    0,  629,    0,    0,  627,
        0,  625,  628,  628,    0,  627,  625,  627,  630,  630,

      629,  628,  627,  629,    0,    0,  628,  630,  629,  631,
        0,  632,  630,  629,    0,  633,    0,  631,  631,  632,
        0,    0,  631,  633,  632,  630,  630,  634,  633,    0,
      634,    0,    0,    0,  630,  634,  631,    0,  632,  630,
      634,    0,  633,    0,  631,  631,  632,    0,  635,  631,
      633,  632,    0,    0,  634,  633,  635,  634,    0,    0,
      636,  635,  634,  636,  637,  638,    0,  634,    0,    0,
        0,  636,  637,  638,    0,  635,  636,  637,  638,    0,
      638,    0,    0,  635,  639,    0,    0,  636,  635,  639,
      636,  637,  638,    0,    0,    0,    0,  639,  636,  637,

      638,  640,  639,  636,  637,  638,    0,  638,    0,  640,
        0,  639,  641,  641,  640,  640,  639,  642,  642,  643,
      641,    0,  643,    0,  639,  641,  642,  643,  640,  639,
        0,  642,  643,    0,    0,  644,  640,  644,    0,  641,
      641,  640,  640,  644,  642,  642,  643,  641,  644,  643,
        0,    0,  641,  642,  643,  645,    0,    0,  642,  643,
        0,  646,  644,  645,  644,  648,    0,    0,  645,  646,
      644,  647,  647,  648,  646,  644,  646,    0,  648,    0,
      647,  727,  645,    0,    0,  647,    0,    0,  646,  727,
      645,    0,  648,    0,  727,  645,  646,    0,  647,  647,

      648,  646,  728,  646,    0,  648,  729,  647,  727,    0,
      728,    0,  647,    0,  729,  728,  727,  731,    0,  729,
        0,  727,  730,  730,    0,  731,  729,    0,    0,  728,
      731,  730,    0,  729,  732,  732,  730,  728,    0,    0,
        0,  729,  728,  732,  731,    0,  729,    0,  732,  730,
      730,  733,  731,  729,    0,  734,    0,  731,  730,  733,
      734,  732,  732,  730,  733,  733,    0,    0,  734,  735,
      732,  735,  736,  734,    0,  732,    0,    0,  733,  735,
      736,    0,  734,    0,  735,  736,  733,  734,    0,  737,
        0,  733,  733,    0,    0,  734,  735,  737,  735,  736,

      734,  738,  737,  737,  739,  739,  735,  736,    0,  738,
      738,  735,  736,  739,  738,    0,  737,    0,  739,    0,
        0,  741,    0,    0,  737,  740,  741,    0,  738,  737,
      737,  739,  739,  740,  741,    0,  738,  738,  740,  741,
      739,  738,  742,    0,  743,  739,    0,    0,  741,  743,
      742,  742,  740,  741,    0,  742,    0,  743,    0,    0,
      740,  741,  743,    0,    0,  740,  741,  744,    0,  742,
        0,  743,    0,  744,    0,  744,  743,  742,  742,    0,
      744,    0,  742,    0,  743,  746,    0,  745,  745,  743,
        0,  747,    0,  746,  744,  748,  745,    0,  746,  747,

      744,  745,  744,  748,  747,  747,    0,  744,  748,    0,
      749,  749,  746,    0,  745,  745,    0,    0,  747,  749,
      746,    0,  748,  745,  749,  746,  747,    0,  745,    0,
      748,  747,  747,  750,  750,  748,  751,  749,  749,    0,
      752,    0,  750,    0,  751,    0,  749,  750,  752,  751,
      751,  749,    0,  752,  752,    0,    0,  753,    0,    0,
      750,  750,    0,  751,    0,  753,    0,  752,    0,  750,
      753,  751,    0,    0,  750,  752,  751,  751,  755,    0,
      752,  752,  754,    0,  753,  754,  755,    0,  756,  756,
      754,  755,  753,    0,  757,  754,  756,  753,  758,    0,

      757,  756,  757,    0,    0,  755,  758,  757,    0,  754,
        0,  758,  754,  755,    0,  756,  756,  754,  755,    0,
        0,  757,  754,  756,    0,  758,    0,  757,  756,  757,
        0,  759,  759,  758,  757,  760,    0,  761,  758,  759,
        0,  762,    0,  760,  759,  761,    0,  760,  760,  762,
      761,    0,    0,    0,  762,    0,    0,    0,  759,  759,
        0,    0,  760,    0,  761,  763,  759,    0,  762,    0,
      760,  759,  761,  763,  760,  760,  762,  761,  763,  763,
      765,  762,  764,  764,    0,    0,  767,    0,  765,  766,
      768,  764,  763,  765,  767,  766,  764,  766,  768,  767,

      763,    0,  766,  768,    0,  763,  763,  765,    0,  764,
      764,    0,    0,  767,    0,  765,  766,  768,  764,  769,
      765,  767,  766,  764,  766,  768,  767,  769,  770,  766,
      768,    0,  769,    0,  771,  772,  770,  772,    0,  771,
        0,  770,    0,  772,    0,  774,  769,  771,  772,    0,
        0,    0,  771,  774,  769,  770,    0,    0,  774,  769,
        0,  771,  772,  770,  772,  775,  771,    0,  770,  773,
      772,    0,  774,  775,  771,  772,    0,  773,  775,  771,
      774,    0,  773,  773,    0,  774,  777,    0,  776,  776,
        0,    0,  775,    0,  777,  778,  773,  776,  777,  777,

      775,    0,  776,  778,  773,  775,    0,  778,  778,  773,
      773,    0,    0,  777,    0,  776,  776,    0,  779,  779,
        0,  777,  778,    0,  776,  777,  777,  779,  781,  776,
      778,  781,  779,    0,  778,  778,  781,    0,  780,  780,
      782,  781,    0,    0,  783,  779,  779,  780,  782,  783,
        0,  784,  780,  782,  779,  781,  784,  783,  781,  779,
        0,    0,  783,  781,  784,  780,  780,  782,  781,  784,
        0,  783,    0,  785,  780,  782,  783,    0,  784,  780,
      782,  785,  786,  784,  783,  786,  785,  785,  788,  783,
      786,  784,  787,  788,  787,  786,  784,  789,    0,    0,

      785,  788,  787,    0,    0,  789,  788,  787,  785,  786,
      789,    0,  786,  785,  785,  788,    0,  786,  790,  787,
      788,  787,  786,    0,  789,    0,  790,  791,  788,  787,
      790,  790,  789,  788,  787,  791,  792,  789,  793,    0,
      791,  791,  794,  793,  792,  790,    0,  794,    0,  792,
        0,  793,    0,  790,  791,  794,  793,  790,  790,    0,
      794,    0,  791,  792,  795,  793,    0,  791,  791,  794,
      793,  792,  795,    0,  794,    0,  792,  795,  793,  796,
      796,    0,  794,  793,    0,    0,    0,  794,  796,  799,
      797,  795,  797,  796,  798,  798,    0,  799,    0,  795,

      797,  800,  799,  798,  795,  797,  796,  796,  798,  800,
      801,    0,    0,    0,  800,  796,  799,  797,  801,  797,
      796,  798,  798,  801,  799,    0,  802,  797,  800,  799,
      798,  802,  797,  803,  804,  798,  800,  801,  803,  802,
        0,  800,  804,    0,  802,  801,  803,  804,  864,  864,
      801,  803,    0,  802,    0,  865,    0,  864,  802,  866,
      803,  804,  864,  865,    0,  803,  802,  866,  865,  804,
        0,  802,  866,  803,  804,  864,  864,    0,  803,  867,
      868,    0,  865,    0,  864,    0,  866,  867,  868,  864,
      865,    0,  867,  868,  866,  865,  869,  869,    0,  866,

      870,    0,    0,  871,  873,  869,  867,  868,  870,    0,
      869,  871,  873,  870,  867,  868,  871,  873,    0,  867,
      868,    0,    0,  869,  869,    0,    0,  870,  872,    0,
      871,  873,  869,    0,  872,  870,  872,  869,  871,  873,
      870,  872,    0,  871,  873,  874,  875,    0,    0,  875,
        0,  877,    0,  874,    0,  872,    0,  875,  874,  877,
        0,  872,  875,  872,  877,  877,  878,    0,  872,  876,
        0,    0,  874,  875,  878,  876,  875,  876,  877,  878,
      874,    0,  876,    0,  875,  874,  877,  879,    0,  875,
      881,  877,  877,  878,  880,  879,  876,  880,  881,  882,

      879,  878,  876,  881,  876,  880,  878,  882,    0,  876,
      880,    0,  882,    0,  879,  883,    0,  881,    0,    0,
        0,  880,  879,  883,  880,  881,  882,  879,  883,    0,
      881,    0,  880,  885,  882,  884,  884,  880,    0,  882,
      886,  885,  883,  887,  884,    0,  885,    0,  886,  884,
      883,  887,    0,  886,    0,  883,  887,    0,    0,    0,
      885,  888,  884,  884,  889,    0,    0,  886,  885,  888,
      887,  884,  889,  885,  888,  886,  884,  889,  887,  890,
      886,  891,    0,  887,    0,    0,    0,  890,  888,  891,
        0,  889,  890,    0,  891,    0,  888,  892,  890,  889,

        0,  888,    0,    0,  889,  892,  890,  894,  891,  892,
      892,    0,    0,    0,  890,  894,  891,  893,  893,  890,
      894,  891,  895,    0,  892,  890,  893,    0,  895,    0,
      895,  893,  892,  896,  894,  895,  892,  892,  896,    0,
        0,    0,  894,    0,  893,  893,  896,  894,  897,  895,
        0,  896,    0,  893,    0,  895,  897,  895,  893,    0,
      896,  897,  895,  898,    0,  896,  900,    0,    0,    0,
        0,  898,    0,  896,  900,  897,  898,  898,  896,  900,
      899,  899,    0,  897,  901,  900,    0,  902,  897,  899,
      898,    0,  901,  900,  899,  902,    0,  901,  898,  903,

      902,  900,  903,  898,  898,  905,  900,  899,  899,    0,
      903,  901,  900,  905,  902,  903,  899,  904,  905,  901,
      904,  899,  902,  906,  901,    0,  903,  902,  904,  903,
      907,  906,  905,  904,    0,    0,  906,  903,  907,    0,
      905,  908,  903,  907,  904,  905,    0,  904,    0,  908,
      906,    0,    0,  909,  908,  904,  910,  907,  906,  909,
      904,  909,    0,  906,  910,  907,  909,    0,  908,  910,
      907,    0,  911,    0,  912,    0,  908,  911,    0,  912,
      909,  908,    0,  910,    0,  911,  909,  912,  909,  913,
      911,  910,  912,  909,    0,    0,  910,  913,    0,  911,

        0,  912,  913,  913,  911,    0,  912,  914,    0,    0,
      914,    0,  911,  915,  912,    0,  913,  911,  914,  912,
      916,  915,    0,  914,  913,    0,  915,  915,  916,  913,
      913,  917,    0,  916,  914,    0,    0,  914,  918,  917,
      915,    0,    0,    0,  917,  914,  918,  916,  915,  919,
      914,  918,    0,  915,  915,  916,  920,  919,  917,    0,
      916,  920,  919,    0,  922,  918,  917,  921,    0,  920,
      922,  917,  922,  918,  920,  921,  919,  922,  918,  921,
      921,    0,  959,  920,  919,  960,    0,    0,  920,  919,
      959,  922,  961,  960,  921,  959,  920,  922,  960,  922,

      961,  920,  921,  962,  922,  961,  921,  921,    0,  959,
      963,  962,  960,  964,    0,    0,  962,  959,  963,  961,
      960,  964,  959,  963,    0,  960,  964,  961,    0,    0,
      962,  966,  961,  965,  965,    0,  966,  963,  962,    0,
      964,    0,  965,  962,  966,  963,  967,  965,  964,  966,
      963,    0,    0,  964,  967,    0,    0,  968,  966,  967,
      965,  965,    0,  966,  969,  968,    0,  970,    0,  965,
      968,  966,  969,  967,  965,  970,  966,  969,  969,    0,
      970,  967,  971,    0,  968,  972,  967,    0,  973,    0,
      971,  969,  968,  972,  970,  971,  973,  968,  972,  969,

      974,  973,  970,  975,  969,  969,  975,  970,  974,  971,
        0,    0,  972,  974,  975,  973,  976,  971,    0,  975,
      972,    0,  971,  973,  976,  972,  977,  974,  973,  976,
      975,    0,    0,  975,  977,  974,  978,  978,  977,  977,
      974,  975,    0,  976,  979,  978,  975,  980,    0,    0,
      978,  976,  979,  977,    0,  980,  976,  979,    0,  981,
      980,  977,  981,  978,  978,  977,  977,    0,  983,    0,
      981,  979,  978,  983,  980,  981,  983,  978,    0,  979,
      982,  983,  980,  984,  979,    0,  981,  980,  982,  981,
        0,  984,    0,  982,  982,  983,  984,  981,  985,    0,

      983,  986,  981,  983,    0,    0,  985,  982,  983,  986,
      984,  985,  985,    0,  986,  982,    0,    0,  984,  987,
      982,  982,  988,  984,    0,  985,    0,  987,  986,  988,
      988,  987,  987,  985,  989,  988,  986,  990,  985,  985,
        0,  986,  989,    0,    0,  990,  987,  989,    0,  988,
      990,  990,    0,    0,  987,  993,  988,  988,  987,  987,
        0,  989,  988,  993,  990,    0,  991,  991,  993,  989,
        0,  992,  990,  994,  989,  991,    0,  990,  990,  992,
      991,  994,  993,  992,  992,    0,  994,    0, 1010,    0,
      993, 1011,    0,  991,  991,  993, 1010,    0,  992, 1011,

      994, 1010,  991,    0, 1011, 1011,  992,  991,  994, 1012,
      992,  992, 1014,  994,    0, 1010, 1013, 1012, 1011,    0,
     1014,    0, 1012, 1010, 1013, 1014, 1011,    0, 1010, 1013,
     1013, 1011, 1011, 1015,    0,    0, 1012,    0,    0, 1014,
        0, 1015, 1017, 1013, 1012, 1015, 1015, 1014,    0, 1012,
     1017, 1013, 1014, 1016, 1016, 1017, 1013, 1013, 1018,    0,
     1015,    0, 1016,    0,    0,    0, 1018, 1016, 1015, 1017,
     1019, 1018, 1015, 1015,    0,    0,    0, 1017, 1019,    0,
     1016, 1016, 1017, 1019,    0, 1018,    0, 1020,    0, 1016,
        0, 1021,    0, 1018, 1016, 1020,    0, 1019, 1018, 1021,

     1020, 1021,    0,    0, 1021, 1019, 1020, 1023, 1022,    0,
     1019, 1022,    0,    0, 1020, 1023, 1022, 1024, 1021,    0,
     1023, 1022, 1020, 1033, 1033, 1024, 1021, 1020, 1021,    0,
     1024, 1021, 1033, 1020, 1023, 1022, 1024, 1033, 1022,    0,
        0, 1034, 1023, 1022, 1024, 1035,    0, 1023, 1022, 1034,
     1033, 1033, 1024, 1035, 1034,    0,    0, 1024, 1035, 1033,
        0, 1036, 1037, 1024, 1033, 1038,    0,    0, 1034, 1036,
     1037, 1040, 1035, 1038, 1036, 1037, 1034,    0, 1038, 1040,
     1035, 1034, 1039,    0, 1040, 1035, 1045,    0, 1036, 1037,
     1039, 1039, 1038,    0, 1045, 1039, 1036, 1037, 1040, 1045,

     1038, 1036, 1037,    0,    0, 1038, 1040, 1046,    0, 1039,
        0, 1040,    0, 1045,    0, 1046, 1047, 1039, 1039, 1048,
     1046, 1045, 1039, 1050, 1047,    0, 1045, 1048,    0, 1047,
        0, 1050, 1048,    0, 1046,    0, 1050,    0,    0,    0,
        0,    0, 1046, 1047,    0,    0, 1048, 1046,    0,    0,
     1050, 1047,    0,    0, 1048,    0, 1047,    0, 1050, 1048,
        0,    0,    0, 1050, 1052,    0,    0, 1052, 1053,    0,
     1053, 1053, 1055,    0, 1055, 1055, 1056,    0, 1056, 1056,
     1057,    0, 1057, 1057, 1058,    0, 1058, 1058, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,

     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../src/parser_flex.lpp"
/**
 * SQL Lexer
 * parser_flex.lpp
 *
 * Based on : https://github.com/hyrise/sql-parser (Feb 2015)
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 13 "../../src/parser_flex.lpp"

#include <stdio.h>
#include <stdlib.h>
#include "parser/statements.h"
#include "parser_bison.h"

char* substr(const char* source, int from, int to) {
	int len = to-from;
	char* copy = (char *) malloc(sizeof(char)* (len+1));
	strncpy(copy, source+from, len);
	copy[len] = '\0';
	return copy;
}

#define TOKEN(name) { return SQL_##name; }
#define yylex           parser_lex

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2109 "parser_flex.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

//#ifdef __cplusplus
//static int yyinput (yyscan_t yyscanner );
//#else
//static int input (yyscan_t yyscanner );
//#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 61 "../../src/parser_flex.lpp"


#line 2352 "parser_flex.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1052 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1051 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 63 "../../src/parser_flex.lpp"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 64 "../../src/parser_flex.lpp"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 65 "../../src/parser_flex.lpp"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 67 "../../src/parser_flex.lpp"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 69 "../../src/parser_flex.lpp"
TOKEN(TRANSACTION)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 70 "../../src/parser_flex.lpp"
TOKEN(DEALLOCATE)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 71 "../../src/parser_flex.lpp"
TOKEN(PARAMETERS)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 72 "../../src/parser_flex.lpp"
TOKEN(REFERENCES)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 73 "../../src/parser_flex.lpp"
TOKEN(INTERSECT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 74 "../../src/parser_flex.lpp"
TOKEN(VARBINARY)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 75 "../../src/parser_flex.lpp"
TOKEN(TEMPORARY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 76 "../../src/parser_flex.lpp"
TOKEN(TIMESTAMP)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 77 "../../src/parser_flex.lpp"
TOKEN(DISTINCT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 78 "../../src/parser_flex.lpp"
TOKEN(NVARCHAR)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 79 "../../src/parser_flex.lpp"
TOKEN(RESTRICT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 80 "../../src/parser_flex.lpp"
TOKEN(TRUNCATE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 81 "../../src/parser_flex.lpp"
TOKEN(ROLLBACK)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 82 "../../src/parser_flex.lpp"
TOKEN(SMALLINT)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 83 "../../src/parser_flex.lpp"
TOKEN(DATABASE)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 84 "../../src/parser_flex.lpp"
TOKEN(BOOLEAN)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 85 "../../src/parser_flex.lpp"
TOKEN(VARCHAR)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 86 "../../src/parser_flex.lpp"
TOKEN(FOREIGN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 87 "../../src/parser_flex.lpp"
TOKEN(TINYINT)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 88 "../../src/parser_flex.lpp"
TOKEN(ANALYZE)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 89 "../../src/parser_flex.lpp"
TOKEN(BETWEEN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 90 "../../src/parser_flex.lpp"
TOKEN(CASCADE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 91 "../../src/parser_flex.lpp"
TOKEN(COLUMNS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 92 "../../src/parser_flex.lpp"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 93 "../../src/parser_flex.lpp"
TOKEN(DEFAULT)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 94 "../../src/parser_flex.lpp"
TOKEN(EXECUTE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 95 "../../src/parser_flex.lpp"
TOKEN(EXPLAIN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 96 "../../src/parser_flex.lpp"
TOKEN(HISTORY)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 97 "../../src/parser_flex.lpp"
TOKEN(INTEGER)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 98 "../../src/parser_flex.lpp"
TOKEN(NATURAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 99 "../../src/parser_flex.lpp"
TOKEN(PREPARE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 100 "../../src/parser_flex.lpp"
TOKEN(PRIMARY)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 101 "../../src/parser_flex.lpp"
TOKEN(SCHEMAS)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 102 "../../src/parser_flex.lpp"
TOKEN(SPATIAL)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 103 "../../src/parser_flex.lpp"
TOKEN(VIRTUAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 104 "../../src/parser_flex.lpp"
TOKEN(DECIMAL)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 105 "../../src/parser_flex.lpp"
TOKEN(BEFORE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 106 "../../src/parser_flex.lpp"
TOKEN(COLUMN)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 107 "../../src/parser_flex.lpp"
TOKEN(CREATE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 108 "../../src/parser_flex.lpp"
TOKEN(DELETE)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 109 "../../src/parser_flex.lpp"
TOKEN(DIRECT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 110 "../../src/parser_flex.lpp"
TOKEN(DOUBLE)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 111 "../../src/parser_flex.lpp"
TOKEN(ESCAPE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 112 "../../src/parser_flex.lpp"
TOKEN(EXCEPT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 113 "../../src/parser_flex.lpp"
TOKEN(EXISTS)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 114 "../../src/parser_flex.lpp"
TOKEN(GLOBAL)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 115 "../../src/parser_flex.lpp"
TOKEN(HAVING)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 116 "../../src/parser_flex.lpp"
TOKEN(BIGINT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 117 "../../src/parser_flex.lpp"
TOKEN(INSERT)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 118 "../../src/parser_flex.lpp"
TOKEN(ISNULL)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 119 "../../src/parser_flex.lpp"
TOKEN(OFFSET)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 120 "../../src/parser_flex.lpp"
TOKEN(RENAME)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 121 "../../src/parser_flex.lpp"
TOKEN(SCHEMA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 122 "../../src/parser_flex.lpp"
TOKEN(SELECT)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 123 "../../src/parser_flex.lpp"
TOKEN(SORTED)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 124 "../../src/parser_flex.lpp"
TOKEN(TABLES)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 125 "../../src/parser_flex.lpp"
TOKEN(UNIQUE)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 126 "../../src/parser_flex.lpp"
TOKEN(UNLOAD)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 127 "../../src/parser_flex.lpp"
TOKEN(UPDATE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 128 "../../src/parser_flex.lpp"
TOKEN(VALUES)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 129 "../../src/parser_flex.lpp"
TOKEN(COMMIT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 130 "../../src/parser_flex.lpp"
TOKEN(AFTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 131 "../../src/parser_flex.lpp"
TOKEN(ALTER)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 132 "../../src/parser_flex.lpp"
TOKEN(CROSS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 133 "../../src/parser_flex.lpp"
TOKEN(DELTA)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 134 "../../src/parser_flex.lpp"
TOKEN(GROUP)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 135 "../../src/parser_flex.lpp"
TOKEN(INDEX)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 136 "../../src/parser_flex.lpp"
TOKEN(INNER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 137 "../../src/parser_flex.lpp"
TOKEN(LIMIT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 138 "../../src/parser_flex.lpp"
TOKEN(LOCAL)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 139 "../../src/parser_flex.lpp"
TOKEN(MERGE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 140 "../../src/parser_flex.lpp"
TOKEN(MINUS)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 141 "../../src/parser_flex.lpp"
TOKEN(ORDER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 142 "../../src/parser_flex.lpp"
TOKEN(OUTER)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 143 "../../src/parser_flex.lpp"
TOKEN(RIGHT)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 144 "../../src/parser_flex.lpp"
TOKEN(TABLE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 145 "../../src/parser_flex.lpp"
TOKEN(UNION)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 146 "../../src/parser_flex.lpp"
TOKEN(USING)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 147 "../../src/parser_flex.lpp"
TOKEN(WHERE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 148 "../../src/parser_flex.lpp"
TOKEN(BEGIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 149 "../../src/parser_flex.lpp"
TOKEN(FLOAT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 150 "../../src/parser_flex.lpp"
TOKEN(CHAR)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 151 "../../src/parser_flex.lpp"
TOKEN(CALL)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 152 "../../src/parser_flex.lpp"
TOKEN(DATE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 153 "../../src/parser_flex.lpp"
TOKEN(DESC)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 154 "../../src/parser_flex.lpp"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 155 "../../src/parser_flex.lpp"
TOKEN(FILE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 156 "../../src/parser_flex.lpp"
TOKEN(FROM)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 157 "../../src/parser_flex.lpp"
TOKEN(FULL)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 158 "../../src/parser_flex.lpp"
TOKEN(HASH)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 159 "../../src/parser_flex.lpp"
TOKEN(HINT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 160 "../../src/parser_flex.lpp"
TOKEN(INTO)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 161 "../../src/parser_flex.lpp"
TOKEN(JOIN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 162 "../../src/parser_flex.lpp"
TOKEN(LEFT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 163 "../../src/parser_flex.lpp"
TOKEN(LIKE)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 164 "../../src/parser_flex.lpp"
TOKEN(LOAD)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 165 "../../src/parser_flex.lpp"
TOKEN(NULL)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 166 "../../src/parser_flex.lpp"
TOKEN(PART)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 167 "../../src/parser_flex.lpp"
TOKEN(PLAN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 168 "../../src/parser_flex.lpp"
TOKEN(SHOW)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 169 "../../src/parser_flex.lpp"
TOKEN(TEXT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 170 "../../src/parser_flex.lpp"
TOKEN(TIME)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 171 "../../src/parser_flex.lpp"
TOKEN(VIEW)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 172 "../../src/parser_flex.lpp"
TOKEN(WITH)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 173 "../../src/parser_flex.lpp"
TOKEN(ADD)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 174 "../../src/parser_flex.lpp"
TOKEN(ALL)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 175 "../../src/parser_flex.lpp"
TOKEN(AND)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 176 "../../src/parser_flex.lpp"
TOKEN(ASC)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 177 "../../src/parser_flex.lpp"
TOKEN(CSV)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 178 "../../src/parser_flex.lpp"
TOKEN(FOR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 179 "../../src/parser_flex.lpp"
TOKEN(INT)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 180 "../../src/parser_flex.lpp"
TOKEN(KEY)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 181 "../../src/parser_flex.lpp"
TOKEN(NOT)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 182 "../../src/parser_flex.lpp"
TOKEN(OFF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 183 "../../src/parser_flex.lpp"
TOKEN(SET)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 184 "../../src/parser_flex.lpp"
TOKEN(TOP)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 185 "../../src/parser_flex.lpp"
TOKEN(AS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 186 "../../src/parser_flex.lpp"
TOKEN(BY)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 187 "../../src/parser_flex.lpp"
TOKEN(IF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 188 "../../src/parser_flex.lpp"
TOKEN(IN)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 189 "../../src/parser_flex.lpp"
TOKEN(IS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 190 "../../src/parser_flex.lpp"
TOKEN(OF)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 191 "../../src/parser_flex.lpp"
TOKEN(ON)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 192 "../../src/parser_flex.lpp"
TOKEN(OR)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 193 "../../src/parser_flex.lpp"
TOKEN(TO)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 196 "../../src/parser_flex.lpp"
TOKEN(NOTEQUALS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 197 "../../src/parser_flex.lpp"
TOKEN(LESSEQ)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 198 "../../src/parser_flex.lpp"
TOKEN(GREATEREQ)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 201 "../../src/parser_flex.lpp"
{ return yytext[0]; }
	YY_BREAK
case 134:
#line 205 "../../src/parser_flex.lpp"
case 135:
YY_RULE_SETUP
#line 205 "../../src/parser_flex.lpp"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 210 "../../src/parser_flex.lpp"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 215 "../../src/parser_flex.lpp"
{
	// Crop the leading and trailing quote char
	yylval->sval = substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 221 "../../src/parser_flex.lpp"
{
	// To lower case
	for (int i = 0; yytext[i]; i++)
	    yytext[i] = tolower(yytext[i]);
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 230 "../../src/parser_flex.lpp"
{
	// Crop the leading and trailing quote char
	yylval->sval = substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 236 "../../src/parser_flex.lpp"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 239 "../../src/parser_flex.lpp"
ECHO;
	YY_BREAK
#line 3159 "parser_flex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1052 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1052 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1051);

	return yy_is_jam ? 0 : yy_current_state;
}

//#ifndef YY_NO_INPUT
//#ifdef __cplusplus
//    static int yyinput (yyscan_t yyscanner)
//#else
//    static int input  (yyscan_t yyscanner)
//#endif
//
//{
//	int c;
//    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
//
//	*yyg->yy_c_buf_p = yyg->yy_hold_char;
//
//	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
//		{
//		/* yy_c_buf_p now points to the character we want to return.
//		 * If this occurs *before* the EOB characters, then it's a
//		 * valid NUL; if not, then we've hit the end of the buffer.
//		 */
//		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
//			/* This was really a NUL. */
//			*yyg->yy_c_buf_p = '\0';
//
//		else
//			{ /* need more input */
//			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
//			++yyg->yy_c_buf_p;
//
//			switch ( yy_get_next_buffer( yyscanner ) )
//				{
//				case EOB_ACT_LAST_MATCH:
//					/* This happens because yy_g_n_b()
//					 * sees that we've accumulated a
//					 * token and flags that we need to
//					 * try matching the token before
//					 * proceeding.  But for input(),
//					 * there's no matching to consider.
//					 * So convert the EOB_ACT_LAST_MATCH
//					 * to EOB_ACT_END_OF_FILE.
//					 */
//
//					/* Reset buffer status. */
//					yyrestart(yyin ,yyscanner);
//
//					/*FALLTHROUGH*/
//
//				case EOB_ACT_END_OF_FILE:
//					{
//					if ( yywrap(yyscanner ) )
//						return 0;
//
//					if ( ! yyg->yy_did_buffer_switch_on_eof )
//						YY_NEW_FILE;
//#ifdef __cplusplus
//					return yyinput(yyscanner);
//#else
//					return input(yyscanner);
//#endif
//					}
//
//				case EOB_ACT_CONTINUE_SCAN:
//					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
//					break;
//				}
//			}
//		}
//
//	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
//	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
//	yyg->yy_hold_char = *++yyg->yy_c_buf_p;
//
//	return c;
//}
//#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner __attribute((unused)))
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner __attribute((unused)))
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner __attribute((unused)))
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner __attribute((unused)))
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 239 "../../src/parser_flex.lpp"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
